exports[`test will generate the correct forum schema 1`] = `
"# All input for the \`createPerson\` mutation.
input CreatePersonInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The \`Person\` to be created by this mutation.
  person: PersonInput!
}

# The output of our \`createPerson\` mutation.
type CreatePersonPayload {
  # The exact same \`clientMutationId\` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The \`Person\` that was created by this mutation.
  person: Person

  # An edge for our \`Person\`. May be used by Relay 1.
  personEdge(
    # The method to use when ordering \`Person\`.
    orderBy: PeopleOrderBy = NAME_ASC
  ): PeopleEdge

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query
}

# All input for the \`createPost\` mutation.
input CreatePostInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The \`Post\` to be created by this mutation.
  post: PostInput!
}

# The output of our \`createPost\` mutation.
type CreatePostPayload {
  # The exact same \`clientMutationId\` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String

  # The \`Post\` that was created by this mutation.
  post: Post

  # An edge for our \`Post\`. May be used by Relay 1.
  postEdge(
    # The method to use when ordering \`Post\`.
    orderBy: PostsOrderBy = HEADLINE_ASC
  ): PostsEdge

  # Reads a single \`Person\` that is related to this \`Post\`.
  personByAuthor: Person

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query
}

# A location in a connection that can be used for resuming pagination.
scalar Cursor

# All input for the \`deletePersonById\` mutation.
input DeletePersonByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The \`Int\` to use when reading a single value.
  id: Int!
}

# All input for the \`deletePerson\` mutation.
input DeletePersonInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique \`ID\` which will identify a single \`Person\` to be deleted.
  nodeId: ID!
}

# The output of our \`deletePerson\` mutation.
type DeletePersonPayload {
  # The exact same \`clientMutationId\` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String
  person: Person
  deletedPersonId: ID

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query
}

# All input for the \`deletePostById\` mutation.
input DeletePostByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The \`Int\` to use when reading a single value.
  id: Int!
}

# All input for the \`deletePost\` mutation.
input DeletePostInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique \`ID\` which will identify a single \`Post\` to be deleted.
  nodeId: ID!
}

# The output of our \`deletePost\` mutation.
type DeletePostPayload {
  # The exact same \`clientMutationId\` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String
  post: Post
  deletedPostId: ID

  # Reads a single \`Person\` that is related to this \`Post\`.
  personByAuthor: Person

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query
}

scalar Email

# The root mutation type which contains root level fields which mutate data.
type Mutation {
  # Creates a single \`Person\`.
  createPerson(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: CreatePersonInput!
  ): CreatePersonPayload

  # Updates a single \`Person\` using its globally unique id and a patch.
  updatePerson(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  # Updates a single \`Person\` using a unique key and a patch.
  updatePersonById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdatePersonByIdInput!
  ): UpdatePersonPayload

  # Updates a single \`Person\` using a unique key and a patch.
  updatePersonByEmail(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdatePersonByEmailInput!
  ): UpdatePersonPayload

  # Deletes a single \`Person\` using its globally unique id.
  deletePerson(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeletePersonInput!
  ): DeletePersonPayload

  # Deletes a single \`Person\` using a unique key.
  deletePersonById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeletePersonByIdInput!
  ): DeletePersonPayload

  # Creates a single \`Post\`.
  createPost(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: CreatePostInput!
  ): CreatePostPayload

  # Updates a single \`Post\` using its globally unique id and a patch.
  updatePost(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdatePostInput!
  ): UpdatePostPayload

  # Updates a single \`Post\` using a unique key and a patch.
  updatePostById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: UpdatePostByIdInput!
  ): UpdatePostPayload

  # Deletes a single \`Post\` using its globally unique id.
  deletePost(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeletePostInput!
  ): DeletePostPayload

  # Deletes a single \`Post\` using a unique key.
  deletePostById(
    # The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    input: DeletePostByIdInput!
  ): DeletePostPayload
}

# An object with a globally unique \`ID\`.
interface Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: Cursor

  # When paginating forwards, the cursor to continue.
  endCursor: Cursor
}

# A connection to a list of \`Person\` values.
type PeopleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Person\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Person\` and cursor to aid in pagination.
  edges: [PeopleEdge]

  # A list of \`Person\` objects.
  nodes: [Person!]
}

# A \`Person\` edge in the connection.
type PeopleEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Person\` at the end of the edge.
  node: Person!
}

# Methods to use when ordering \`Person\`.
enum PeopleOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
}

type Person implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: Int!
  name: String!
  email: Email!
  firstName: String
  lastName: String
  about: String
}

# A condition to be used against \`Person\` object types. All fields are tested for equality and combined with a logical ‘and.’
input PersonCondition {
  # Checks for equality with the object’s \`id\` field.
  id: Int

  # Checks for equality with the object’s \`name\` field.
  name: String

  # Checks for equality with the object’s \`email\` field.
  email: Email

  # Checks for equality with the object’s \`firstName\` field.
  firstName: String

  # Checks for equality with the object’s \`lastName\` field.
  lastName: String

  # Checks for equality with the object’s \`about\` field.
  about: String
}

input PersonInput {
  id: Int!
  name: String!
  email: Email!
  firstName: String
  lastName: String
  about: String
}

# Represents an update to a \`Person\`. Fields that are set will be updated.
input PersonPatch {
  id: Int
  name: String
  email: Email
  firstName: String
  lastName: String
  about: String
}

type Post implements Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  nodeId: ID!
  id: Int!
  authorId: Int!
  status: PostStatus!
  headline: String!
  body: String

  # Reads a single \`Person\` that is related to this \`Post\`.
  personByAuthor: Person
}

# A condition to be used against \`Post\` object types. All fields are tested for equality and combined with a logical ‘and.’
input PostCondition {
  # Checks for equality with the object’s \`id\` field.
  id: Int

  # Checks for equality with the object’s \`authorId\` field.
  authorId: Int

  # Checks for equality with the object’s \`status\` field.
  status: PostStatus

  # Checks for equality with the object’s \`headline\` field.
  headline: String

  # Checks for equality with the object’s \`body\` field.
  body: String
}

input PostInput {
  id: Int!
  authorId: Int!
  status: PostStatus!
  headline: String!
  body: String
}

# Represents an update to a \`Post\`. Fields that are set will be updated.
input PostPatch {
  id: Int
  authorId: Int
  status: PostStatus
  headline: String
  body: String
}

# A connection to a list of \`Post\` values.
type PostsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Post\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Post\` and cursor to aid in pagination.
  edges: [PostsEdge]

  # A list of \`Post\` objects.
  nodes: [Post!]
}

# A \`Post\` edge in the connection.
type PostsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Post\` at the end of the edge.
  node: Post!
}

# Methods to use when ordering \`Post\`.
enum PostsOrderBy {
  ID_ASC
  ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  STATUS_ASC
  STATUS_DESC
  HEADLINE_ASC
  HEADLINE_DESC
}

enum PostStatus {
  UNPUBLISHED
  PUBLISHED
}

# The root query type which gives access points into the data universe.
type Query implements Node {
  # Fetches an object given its globally unique \`ID\`.
  node(
    # The globally unique \`ID\`.
    nodeId: ID!
  ): Node

  # Reads and enables pagination through a set of \`Person\`.
  allPeople(
    # The method to use when ordering \`Person\`.
    orderBy: PeopleOrderBy = NAME_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int

    # Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    # based pagination. May not be used with \`last\`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: PersonCondition
  ): PeopleConnection

  # Reads a single \`Person\` using its globally unique \`ID\`.
  person(
    # The globally unique \`ID\` to be used in selecting a single \`Person\`.
    nodeId: ID!
  ): Person
  personById(
    # The \`Int\` to use when reading a single value.
    id: Int!
  ): Person
  personByName(
    # The \`String\` to use when reading a single value.
    name: String!
  ): Person
  personByEmail(
    # The \`String\` to use when reading a single value.
    email: String!
  ): Person

  # Reads and enables pagination through a set of \`Post\`.
  allPosts(
    # The method to use when ordering \`Post\`.
    orderBy: PostsOrderBy = HEADLINE_ASC

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int

    # Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    # based pagination. May not be used with \`last\`.
    offset: Int

    # A condition to be used in determining which values should be returned by the collection.
    condition: PostCondition
  ): PostsConnection

  # Reads a single \`Post\` using its globally unique \`ID\`.
  post(
    # The globally unique \`ID\` to be used in selecting a single \`Post\`.
    nodeId: ID!
  ): Post
  postById(
    # The \`Int\` to use when reading a single value.
    id: Int!
  ): Post

  # Exposes the root query type nested one level down. This is helpful for Relay 1
  # which can only query top level fields if they are in a particular form.
  query: Query!

  # The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  nodeId: ID!
}

# All input for the \`updatePersonByEmail\` mutation.
input UpdatePersonByEmailInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The \`String\` to use when reading a single value.
  email: String!

  # An object where the defined keys will be set on the \`Person\` identified by our unique key.
  personPatch: PersonPatch!
}

# All input for the \`updatePersonById\` mutation.
input UpdatePersonByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The \`Int\` to use when reading a single value.
  id: Int!

  # An object where the defined keys will be set on the \`Person\` identified by our unique key.
  personPatch: PersonPatch!
}

# All input for the \`updatePerson\` mutation.
input UpdatePersonInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique \`ID\` which will identify a single \`Person\` to be updated.
  nodeId: ID!

  # An object where the defined keys will be set on the \`Person\` identified by our globally unique \`ID\`.
  personPatch: PersonPatch!
}

# The output of our \`updatePerson\` mutation.
type UpdatePersonPayload {
  # The exact same \`clientMutationId\` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String
  person: Person

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query
}

# All input for the \`updatePostById\` mutation.
input UpdatePostByIdInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The \`Int\` to use when reading a single value.
  id: Int!

  # An object where the defined keys will be set on the \`Post\` identified by our unique key.
  postPatch: PostPatch!
}

# All input for the \`updatePost\` mutation.
input UpdatePostInput {
  # An arbitrary string value with no semantic meaning. Will be included in the
  # payload verbatim. May be used to track mutations by the client.
  clientMutationId: String

  # The globally unique \`ID\` which will identify a single \`Post\` to be updated.
  nodeId: ID!

  # An object where the defined keys will be set on the \`Post\` identified by our globally unique \`ID\`.
  postPatch: PostPatch!
}

# The output of our \`updatePost\` mutation.
type UpdatePostPayload {
  # The exact same \`clientMutationId\` that was provided in the mutation input,
  # unchanged and unused. May be used by a client to track mutations.
  clientMutationId: String
  post: Post

  # Reads a single \`Person\` that is related to this \`Post\`.
  personByAuthor: Person

  # Our root query field type. Allows us to run any query from our mutation payload.
  query: Query
}
"
`;
