#!/usr/bin/env node
const fs = require('fs');
const { execSync } = require('child_process');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const HtmlWebpackInlineSourcePlugin = require('html-webpack-inline-source-plugin');

const ASSETS_SOURCE_DIR = `${__dirname}/../assets/`;
const ASSETS_DEST_DIR = `${__dirname}/../src/assets/`;

async function main() {

  // Step 1: compile GraphiQL
  await new Promise((resolve, reject) => {
    webpack({
      mode: 'production',
      target: 'web',
      entry: `${__dirname}/../postgraphiql/src/index.js`,
      output: {
        path: ASSETS_SOURCE_DIR,
        filename: 'graphiql.js'
      },
      module: {
        rules: [
          {
            test: /\.jsx?$/,
            exclude: /node_modules/,
            use: {
              loader: 'babel-loader',
              options: {
                presets: ['@babel/preset-env', '@babel/preset-react'],
                plugins: ['@babel/plugin-proposal-class-properties'],
              },
            },
          },
          {
            test: /\.css$/,
            use: {
              loader: 'css-loader',
            },
          },
        ],
      },
      plugins: [
        // Prevent webpack from attempting to import flow stuff (dynamic requires in GraphiQL)
        new webpack.ContextReplacementPlugin(
          /graphql-language-service-interface[\\/]dist$/,
          new RegExp(`^\\./.*\\.js$`)
        ),
        new HtmlWebpackPlugin({
          filename: 'graphiql.html',
          template: `${__dirname}/../postgraphiql/public/index.html`,
          inlineSource: '.(js|css)$', // embed all javascript and css inline
          inject: 'body',
        }),
        new HtmlWebpackInlineSourcePlugin()
      ] 
    }, (err, stats) => {
      if (err) {
        console.error(err);
        process.exit(1);
      }
      if (stats.hasErrors()) {
        console.log(stats.toString("minimal"));
        process.exit(2);
      }
      // We only want the HTML file
      fs.unlinkSync(`${ASSETS_SOURCE_DIR}/graphiql.js`);
      console.log(stats.toString("minimal"));
      resolve();
    });
  });

  // Step 2: compile the assets
  const files = fs.readdirSync(ASSETS_SOURCE_DIR);
  files.filter(f => f[0] !== '.').map(filename => {
    const fileContent = fs.readFileSync(`${ASSETS_SOURCE_DIR}/${filename}`);
    const output = `export default Buffer.from(\n  '${fileContent.toString(
      'base64',
    )}',\n  'base64'\n);\n`;
    fs.writeFileSync(`${ASSETS_DEST_DIR}/${filename}.ts`, output);
  });
}


main().then(() => {}, err => {
  console.error("An error occurred");
  console.error(err);
  process.exit(3);
});
