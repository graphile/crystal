## expect(errors).toBeFalsy();
#> schema: ["a", "b", "c"]
#> subscriptions: true
#> variableValues: {"cursor2": "WyIwOGUwZDM0MmRlIiwyXQ==", "cursor6": "WyIwOGUwZDM0MmRlIiw2XQ==", "null": null, "two": 2, "orderBy": ["AUTHOR_ID_DESC", "HEADLINE_DESC"]}
query Q(
  $cursor2: Cursor
  $cursor6: Cursor
  $unset: Cursor
  $null: Cursor
  $two: Int!
  $orderBy: [PostsOrderBy!]!
) {
  a: allPeople {
    ...personConnection
  }
  b: allPeople(first: $two) {
    ...personConnection
  }
  c: allPeople(last: $two) {
    ...personConnection
  }
  d: allPeople(orderBy: NAME_ASC, before: $unset, after: $unset) {
    ...personConnection
  }
  e: allPeople(orderBy: NAME_DESC, before: $null) {
    ...personConnection
  }
  f: allPeople(orderBy: PRIMARY_KEY_ASC, before: $cursor2) {
    ...personConnection
  }
  g: allPeople(orderBy: PRIMARY_KEY_ASC, after: $cursor2) {
    ...personConnection
  }
  h: allUpdatableViews {
    edges {
      cursor
      node {
        x
        name
        constant
      }
    }
  }
  i: allUpdatableViews(orderBy: CONSTANT_ASC) {
    edges {
      cursor
      node {
        x
        name
        constant
      }
    }
  }
  j: allPosts(condition: { authorId: $two }) {
    ...postConnection
  }
  k: allPosts(first: $two, condition: { authorId: $two }) {
    ...postConnection
  }
  l: allPosts(last: 1, orderBy: HEADLINE_ASC, condition: { authorId: 1 }) {
    ...postConnection
  }
  m: allPeople(first: 3, offset: 1) {
    ...personConnection
  }
  n: allPeople(first: 0) {
    ...personConnection
  }
  o: allEdgeCases(condition: { rowId: 2 }) {
    nodes {
      rowId
    }
  }
  p: allPeople(last: 2, before: $cursor6, after: null, first: null) {
    ...personConnection
  }
  q: allPeople(orderBy: PRIMARY_KEY_ASC, after: $cursor2, first: 1) {
    ...personConnection
  }
  r: allPeople(orderBy: PRIMARY_KEY_ASC, after: $cursor2, last: 1) {
    ...personConnection
  }
  s: allPeople(condition: { about: null }) {
    ...personConnection
  }
  t: allPosts(orderBy: $orderBy, first: 3) {
    ...postConnection
  }
  u: allPeople(condition: { lastLoginFromIp: "192.168.0.1" }) {
    ...personConnection
  }
  v: allPosts(first: 2) {
    e1: edges {
      n1: node {
        id
        personByAuthorId {
          name
        }
      }
      n2: node {
        headline
        personByAuthorId {
          id
        }
      }
    }
    e2: edges {
      node {
        nodeId
      }
    }
  }
  w: allPeople(condition: { lastLoginFromSubnet: "192.168.0.0/24" }) {
    ...personConnection
  }
  x: allPeople(condition: { userMac: "0000.0000.0000" }) {
    ...personConnection
  }
  nullTest1: allNullTestRecords {
    nodes {
      nullableText
      nullableInt
    }
  }
}

fragment personConnection on PeopleConnection {
  pageInfo {
    startCursor
    endCursor
    hasNextPage
    hasPreviousPage
  }
  totalCount
  edges {
    cursor
    node {
      id
      name
      email
      config
      lastLoginFromIp
      lastLoginFromSubnet
      userMac
    }
  }
}

fragment postConnection on PostsConnection {
  pageInfo {
    startCursor
    endCursor
    hasNextPage
    hasPreviousPage
  }
  totalCount
  edges {
    cursor
    node {
      headline
      authorId
    }
  }
}
