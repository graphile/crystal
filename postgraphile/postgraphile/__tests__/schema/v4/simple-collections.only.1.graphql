enum AnEnum {
  ASTERISK
  ASTERISK_ASTERISK
  ASTERISK_ASTERISK_ASTERISK
  ASTERISK_BAR
  ASTERISK_BAR_
  ASTERISK_BAZ_ASTERISK
  AWAITING
  DOLLAR
  FOO_ASTERISK
  FOO_ASTERISK_
  GREATER_THAN_OR_EQUAL
  LIKE
  PERCENT
  PUBLISHED
  REJECTED
  _ASTERISK_BAR_
  _ASTERISK_BAZ_ASTERISK_
  _FOO_ASTERISK
}

scalar AnInt

"""A range of `AnInt`."""
type AnIntRange {
  """The ending bound of our range."""
  end: AnIntRangeBound

  """The starting bound of our range."""
  start: AnIntRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type AnIntRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: AnInt!
}

scalar AnotherInt

"""Binary data encoded using Base64"""
scalar Base64EncodedBinary

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A range of `BigFloat`."""
type BigFloatRange {
  """The ending bound of our range."""
  end: BigFloatRangeBound

  """The starting bound of our range."""
  start: BigFloatRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type BigFloatRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: BigFloat!
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""Represents the colours red, green and blue."""
enum Color {
  BLUE
  GREEN
  RED
}

type CompoundKey implements Node {
  extra: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Person` that is related to this `CompoundKey`."""
  personByPersonId1: Person

  """Reads a single `Person` that is related to this `CompoundKey`."""
  personByPersonId2: Person
  personId1: Int!
  personId2: Int!
}

"""
A condition to be used against `CompoundKey` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CompoundKeyCondition {
  """Checks for equality with the object’s `extra` field."""
  extra: Boolean

  """Checks for equality with the object’s `personId1` field."""
  personId1: Int

  """Checks for equality with the object’s `personId2` field."""
  personId2: Int
}

"""An input for mutations affecting `CompoundKey`"""
input CompoundKeyInput {
  extra: Boolean
  personId1: Int!
  personId2: Int!
}

"""
Represents an update to a `CompoundKey`. Fields that are set will be updated.
"""
input CompoundKeyPatch {
  extra: Boolean
  personId1: Int
  personId2: Int
}

"""Methods to use when ordering `CompoundKey`."""
enum CompoundKeysOrderBy {
  EXTRA_ASC
  EXTRA_DESC
  NATURAL
  PERSON_ID_1_ASC
  PERSON_ID_1_DESC
  PERSON_ID_2_ASC
  PERSON_ID_2_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Awesome feature!"""
type CompoundType {
  a: Int
  b: String
  c: Color
  computedField: Int
  d: UUID
  e: EnumCaps
  f: EnumWithEmptyString
  fooBar: Int
  g: Interval
}

"""An input for mutations affecting `CompoundType`"""
input CompoundTypeInput {
  a: Int
  b: String
  c: Color
  d: UUID
  e: EnumCaps
  f: EnumWithEmptyString
  fooBar: Int
  g: IntervalInput
}

type Comptype {
  isOptimised: Boolean
  schedule: Datetime
}

"""All input for the create `CompoundKey` mutation."""
input CreateCompoundKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CompoundKey` to be created by this mutation."""
  compoundKey: CompoundKeyInput!
}

"""The output of our create `CompoundKey` mutation."""
type CreateCompoundKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CompoundKey` that was created by this mutation."""
  compoundKey: CompoundKey

  """Reads a single `Person` that is related to this `CompoundKey`."""
  personByPersonId1: Person

  """Reads a single `Person` that is related to this `CompoundKey`."""
  personByPersonId2: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EdgeCase` mutation."""
input CreateEdgeCaseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EdgeCase` to be created by this mutation."""
  edgeCase: EdgeCaseInput!
}

"""The output of our create `EdgeCase` mutation."""
type CreateEdgeCasePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EdgeCase` that was created by this mutation."""
  edgeCase: EdgeCase

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Issue756` mutation."""
input CreateIssue756Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Issue756` to be created by this mutation."""
  issue756: Issue756Input!
}

"""The output of our create `Issue756` mutation."""
type CreateIssue756Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Issue756` that was created by this mutation."""
  issue756: Issue756

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `LeftArm` mutation."""
input CreateLeftArmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `LeftArm` to be created by this mutation."""
  leftArm: LeftArmInput!
}

"""The output of our create `LeftArm` mutation."""
type CreateLeftArmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LeftArm` that was created by this mutation."""
  leftArm: LeftArm

  """Reads a single `Person` that is related to this `LeftArm`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MyTable` mutation."""
input CreateMyTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MyTable` to be created by this mutation."""
  myTable: MyTableInput!
}

"""The output of our create `MyTable` mutation."""
type CreateMyTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MyTable` that was created by this mutation."""
  myTable: MyTable

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `NullTestRecord` mutation."""
input CreateNullTestRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NullTestRecord` to be created by this mutation."""
  nullTestRecord: NullTestRecordInput!
}

"""The output of our create `NullTestRecord` mutation."""
type CreateNullTestRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NullTestRecord` that was created by this mutation."""
  nullTestRecord: NullTestRecord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Person` mutation."""
input CreatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Person` to be created by this mutation."""
  person: PersonInput!
}

"""The output of our create `Person` mutation."""
type CreatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was created by this mutation."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PersonSecret` mutation."""
input CreatePersonSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PersonSecret` to be created by this mutation."""
  personSecret: PersonSecretInput!
}

"""The output of our create `PersonSecret` mutation."""
type CreatePersonSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` this `PersonSecret` belongs to."""
  personByPersonId: Person

  """The `PersonSecret` that was created by this mutation."""
  personSecret: PersonSecret @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A calendar date in YYYY-MM-DD format."""
scalar Date

"""A range of `Date`."""
type DateRange {
  """The ending bound of our range."""
  end: DateRangeBound

  """The starting bound of our range."""
  start: DateRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type DateRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Date!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""All input for the `deleteCompoundKeyByPersonId1AndPersonId2` mutation."""
input DeleteCompoundKeyByPersonId1AndPersonId2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId1: Int!
  personId2: Int!
}

"""All input for the `deleteCompoundKey` mutation."""
input DeleteCompoundKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CompoundKey` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CompoundKey` mutation."""
type DeleteCompoundKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CompoundKey` that was deleted by this mutation."""
  compoundKey: CompoundKey
  deletedCompoundKeyId: ID

  """Reads a single `Person` that is related to this `CompoundKey`."""
  personByPersonId1: Person

  """Reads a single `Person` that is related to this `CompoundKey`."""
  personByPersonId2: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteIssue756ById` mutation."""
input DeleteIssue756ByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteIssue756` mutation."""
input DeleteIssue756Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Issue756` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Issue756` mutation."""
type DeleteIssue756Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedIssue756Id: ID

  """The `Issue756` that was deleted by this mutation."""
  issue756: Issue756

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteLeftArmById` mutation."""
input DeleteLeftArmByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteLeftArmByPersonId` mutation."""
input DeleteLeftArmByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: Int!
}

"""All input for the `deleteLeftArm` mutation."""
input DeleteLeftArmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `LeftArm` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `LeftArm` mutation."""
type DeleteLeftArmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedLeftArmId: ID

  """The `LeftArm` that was deleted by this mutation."""
  leftArm: LeftArm

  """Reads a single `Person` that is related to this `LeftArm`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMyTableById` mutation."""
input DeleteMyTableByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMyTable` mutation."""
input DeleteMyTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MyTable` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MyTable` mutation."""
type DeleteMyTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMyTableId: ID

  """The `MyTable` that was deleted by this mutation."""
  myTable: MyTable

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNullTestRecordById` mutation."""
input DeleteNullTestRecordByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteNullTestRecord` mutation."""
input DeleteNullTestRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NullTestRecord` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `NullTestRecord` mutation."""
type DeleteNullTestRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedNullTestRecordId: ID

  """The `NullTestRecord` that was deleted by this mutation."""
  nullTestRecord: NullTestRecord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePersonByEmail` mutation."""
input DeletePersonByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!
}

"""All input for the `deletePersonById` mutation."""
input DeletePersonByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the person"""
  id: Int!
}

"""All input for the `deletePerson` mutation."""
input DeletePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Person` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Person` mutation."""
type DeletePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPersonId: ID

  """The `Person` that was deleted by this mutation."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePersonSecretByPersonId` mutation."""
input DeletePersonSecretByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: Int!
}

"""All input for the `deletePersonSecret` mutation."""
input DeletePersonSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PersonSecret` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PersonSecret` mutation."""
type DeletePersonSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPersonSecretId: ID

  """The `Person` this `PersonSecret` belongs to."""
  personByPersonId: Person

  """The `PersonSecret` that was deleted by this mutation."""
  personSecret: PersonSecret

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type EdgeCase {
  computed: String
  notNullHasDefault: Boolean!
  rowId: Int
  wontCastEasy: Int
}

"""
A condition to be used against `EdgeCase` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EdgeCaseCondition {
  """Checks for equality with the object’s `notNullHasDefault` field."""
  notNullHasDefault: Boolean

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `wontCastEasy` field."""
  wontCastEasy: Int
}

"""An input for mutations affecting `EdgeCase`"""
input EdgeCaseInput {
  notNullHasDefault: Boolean
  rowId: Int
  wontCastEasy: Int
}

"""Methods to use when ordering `EdgeCase`."""
enum EdgeCasesOrderBy {
  NATURAL
  NOT_NULL_HAS_DEFAULT_ASC
  NOT_NULL_HAS_DEFAULT_DESC
  ROW_ID_ASC
  ROW_ID_DESC
  WONT_CAST_EASY_ASC
  WONT_CAST_EASY_DESC
}

scalar Email

enum EnumCaps {
  BAR_FOO
  BAZ_QUX
  FOO_BAR
  _0_BAR
}

enum EnumWithEmptyString {
  ONE
  TWO
  _EMPTY_
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
input FloatRangeBoundInput {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Float!
}

"""A range of `Float`."""
input FloatRangeInput {
  """The ending bound of our range."""
  end: FloatRangeBoundInput

  """The starting bound of our range."""
  start: FloatRangeBoundInput
}

type FuncOutComplexRecord {
  x: Int
  y: CompoundType
  z: Person
}

type FuncOutComplexSetofRecord {
  x: Int
  y: CompoundType
  z: Person
}

type FuncOutOutCompoundTypeRecord {
  o1: Int
  o2: CompoundType
}

type FuncOutOutRecord {
  firstOut: Int
  secondOut: String
}

type FuncOutOutSetofRecord {
  o1: Int
  o2: String
}

type FuncOutOutUnnamedRecord {
  arg1: Int
  arg2: String
}

type FuncOutUnnamedOutOutUnnamedRecord {
  arg1: Int
  arg3: Int
  o2: String
}

type FuncReturnsTableMultiColRecord {
  col1: Int
  col2: String
}

"""All input for the `intSetMutation` mutation."""
input IntSetMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  x: Int
  y: Int
  z: Int
}

"""The output of our `intSetMutation` mutation."""
type IntSetMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integers: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""An IPv4 or IPv6 host address, and optionally its subnet."""
scalar InternetAddress

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
input IntervalInput {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

type Issue756 implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  ts: NotNullTimestamp!
}

"""
A condition to be used against `Issue756` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input Issue756Condition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `ts` field."""
  ts: NotNullTimestamp
}

"""An input for mutations affecting `Issue756`"""
input Issue756Input {
  id: Int
  ts: NotNullTimestamp
}

"""All input for the `issue756Mutation` mutation."""
input Issue756MutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `issue756Mutation` mutation."""
type Issue756MutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  issue756: Issue756

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Represents an update to a `Issue756`. Fields that are set will be updated.
"""
input Issue756Patch {
  id: Int
  ts: NotNullTimestamp
}

"""Methods to use when ordering `Issue756`."""
enum Issue756SOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TS_ASC
  TS_DESC
}

"""All input for the `issue756SetMutation` mutation."""
input Issue756SetMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `issue756SetMutation` mutation."""
type Issue756SetMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  issue756S: [Issue756!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""All input for the `jsonIdentityMutation` mutation."""
input JsonIdentityMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  json: JSON
}

"""The output of our `jsonIdentityMutation` mutation."""
type JsonIdentityMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `jsonbIdentityMutation` mutation."""
input JsonbIdentityMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  json: JSON
}

"""The output of our `jsonbIdentityMutation` mutation."""
type JsonbIdentityMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `jsonbIdentityMutationPlpgsql` mutation."""
input JsonbIdentityMutationPlpgsqlInput {
  _theJson: JSON!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `jsonbIdentityMutationPlpgsql` mutation."""
type JsonbIdentityMutationPlpgsqlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `jsonbIdentityMutationPlpgsqlWithDefault` mutation."""
input JsonbIdentityMutationPlpgsqlWithDefaultInput {
  _theJson: JSON

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `jsonbIdentityMutationPlpgsqlWithDefault` mutation."""
type JsonbIdentityMutationPlpgsqlWithDefaultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  json: JSON

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A set of key/value pairs, keys are strings, values may be a string or null. Exposed as a JSON object.
"""
scalar KeyValueHash

"""
Represents an `ltree` hierarchical label tree as outlined in https://www.postgresql.org/docs/current/ltree.html
"""
scalar LTree

"""Tracks metadata about the left arms of various people"""
type LeftArm implements Node {
  id: Int!
  lengthInMetres: Float
  mood: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Person` that is related to this `LeftArm`."""
  personByPersonId: Person
  personId: Int
}

"""An input representation of `LeftArm` with nullable fields."""
input LeftArmBaseInput {
  id: Int
  lengthInMetres: Float
  mood: String
  personId: Int
}

"""
A condition to be used against `LeftArm` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LeftArmCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lengthInMetres` field."""
  lengthInMetres: Float

  """Checks for equality with the object’s `mood` field."""
  mood: String

  """Checks for equality with the object’s `personId` field."""
  personId: Int
}

"""All input for the `leftArmIdentity` mutation."""
input LeftArmIdentityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  leftArm: LeftArmBaseInput
}

"""The output of our `leftArmIdentity` mutation."""
type LeftArmIdentityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  leftArm: LeftArm

  """Reads a single `Person` that is related to this `LeftArm`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""An input for mutations affecting `LeftArm`"""
input LeftArmInput {
  id: Int
  lengthInMetres: Float
  mood: String
  personId: Int
}

"""
Represents an update to a `LeftArm`. Fields that are set will be updated.
"""
input LeftArmPatch {
  id: Int
  lengthInMetres: Float
  mood: String
  personId: Int
}

"""Methods to use when ordering `LeftArm`."""
enum LeftArmsOrderBy {
  ID_ASC
  ID_DESC
  LENGTH_IN_METRES_ASC
  LENGTH_IN_METRES_DESC
  MOOD_ASC
  MOOD_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `listOfCompoundTypesMutation` mutation."""
input ListOfCompoundTypesMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  records: [CompoundTypeInput]
}

"""The output of our `listOfCompoundTypesMutation` mutation."""
type ListOfCompoundTypesMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  compoundTypes: [CompoundType!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `CompoundKey`."""
  createCompoundKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompoundKeyInput!
  ): CreateCompoundKeyPayload

  """Creates a single `EdgeCase`."""
  createEdgeCase(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEdgeCaseInput!
  ): CreateEdgeCasePayload

  """Creates a single `Issue756`."""
  createIssue756(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIssue756Input!
  ): CreateIssue756Payload

  """Creates a single `LeftArm`."""
  createLeftArm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLeftArmInput!
  ): CreateLeftArmPayload

  """Creates a single `MyTable`."""
  createMyTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMyTableInput!
  ): CreateMyTablePayload

  """Creates a single `NullTestRecord`."""
  createNullTestRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNullTestRecordInput!
  ): CreateNullTestRecordPayload

  """Creates a single `Person`."""
  createPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePersonInput!
  ): CreatePersonPayload

  """Creates a single `PersonSecret`."""
  createPersonSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePersonSecretInput!
  ): CreatePersonSecretPayload @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """Deletes a single `CompoundKey` using its globally unique id."""
  deleteCompoundKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompoundKeyInput!
  ): DeleteCompoundKeyPayload

  """Deletes a single `CompoundKey` using a unique key."""
  deleteCompoundKeyByPersonId1AndPersonId2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompoundKeyByPersonId1AndPersonId2Input!
  ): DeleteCompoundKeyPayload

  """Deletes a single `Issue756` using its globally unique id."""
  deleteIssue756(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIssue756Input!
  ): DeleteIssue756Payload

  """Deletes a single `Issue756` using a unique key."""
  deleteIssue756ById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIssue756ByIdInput!
  ): DeleteIssue756Payload

  """Deletes a single `LeftArm` using its globally unique id."""
  deleteLeftArm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLeftArmInput!
  ): DeleteLeftArmPayload

  """Deletes a single `LeftArm` using a unique key."""
  deleteLeftArmById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLeftArmByIdInput!
  ): DeleteLeftArmPayload

  """Deletes a single `LeftArm` using a unique key."""
  deleteLeftArmByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteLeftArmByPersonIdInput!
  ): DeleteLeftArmPayload

  """Deletes a single `MyTable` using its globally unique id."""
  deleteMyTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMyTableInput!
  ): DeleteMyTablePayload

  """Deletes a single `MyTable` using a unique key."""
  deleteMyTableById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMyTableByIdInput!
  ): DeleteMyTablePayload

  """Deletes a single `NullTestRecord` using its globally unique id."""
  deleteNullTestRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNullTestRecordInput!
  ): DeleteNullTestRecordPayload

  """Deletes a single `NullTestRecord` using a unique key."""
  deleteNullTestRecordById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNullTestRecordByIdInput!
  ): DeleteNullTestRecordPayload

  """Deletes a single `Person` using its globally unique id."""
  deletePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonInput!
  ): DeletePersonPayload

  """Deletes a single `Person` using a unique key."""
  deletePersonByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonByEmailInput!
  ): DeletePersonPayload

  """Deletes a single `Person` using a unique key."""
  deletePersonById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonByIdInput!
  ): DeletePersonPayload

  """Deletes a single `PersonSecret` using its globally unique id."""
  deletePersonSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonSecretInput!
  ): DeletePersonSecretPayload @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """Deletes a single `PersonSecret` using a unique key."""
  deletePersonSecretByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePersonSecretByPersonIdInput!
  ): DeletePersonSecretPayload @deprecated(reason: "This is deprecated (comment on table c.person_secret).")
  intSetMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: IntSetMutationInput!
  ): IntSetMutationPayload
  issue756Mutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Issue756MutationInput!
  ): Issue756MutationPayload
  issue756SetMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Issue756SetMutationInput!
  ): Issue756SetMutationPayload
  jsonIdentityMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: JsonIdentityMutationInput!
  ): JsonIdentityMutationPayload
  jsonbIdentityMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: JsonbIdentityMutationInput!
  ): JsonbIdentityMutationPayload
  jsonbIdentityMutationPlpgsql(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: JsonbIdentityMutationPlpgsqlInput!
  ): JsonbIdentityMutationPlpgsqlPayload
  jsonbIdentityMutationPlpgsqlWithDefault(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: JsonbIdentityMutationPlpgsqlWithDefaultInput!
  ): JsonbIdentityMutationPlpgsqlWithDefaultPayload
  leftArmIdentity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LeftArmIdentityInput!
  ): LeftArmIdentityPayload
  listOfCompoundTypesMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ListOfCompoundTypesMutationInput!
  ): ListOfCompoundTypesMutationPayload
  mutationInInout(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationInInoutInput!
  ): MutationInInoutPayload
  mutationInOut(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationInOutInput!
  ): MutationInOutPayload
  mutationOut(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutInput!
  ): MutationOutPayload
  mutationOutComplex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutComplexInput!
  ): MutationOutComplexPayload
  mutationOutComplexSetof(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutComplexSetofInput!
  ): MutationOutComplexSetofPayload
  mutationOutOut(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutOutInput!
  ): MutationOutOutPayload
  mutationOutOutCompoundType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutOutCompoundTypeInput!
  ): MutationOutOutCompoundTypePayload
  mutationOutOutSetof(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutOutSetofInput!
  ): MutationOutOutSetofPayload
  mutationOutOutUnnamed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutOutUnnamedInput!
  ): MutationOutOutUnnamedPayload
  mutationOutSetof(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutSetofInput!
  ): MutationOutSetofPayload
  mutationOutTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutTableInput!
  ): MutationOutTablePayload
  mutationOutTableSetof(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutTableSetofInput!
  ): MutationOutTableSetofPayload
  mutationOutUnnamed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutUnnamedInput!
  ): MutationOutUnnamedPayload
  mutationOutUnnamedOutOutUnnamed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationOutUnnamedOutOutUnnamedInput!
  ): MutationOutUnnamedOutOutUnnamedPayload
  mutationReturnsTableMultiCol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationReturnsTableMultiColInput!
  ): MutationReturnsTableMultiColPayload
  mutationReturnsTableOneCol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationReturnsTableOneColInput!
  ): MutationReturnsTableOneColPayload
  noArgsMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: NoArgsMutationInput!
  ): NoArgsMutationPayload
  tableMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TableMutationInput!
  ): TableMutationPayload
  tableSetMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TableSetMutationInput!
  ): TableSetMutationPayload
  typesMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: TypesMutationInput!
  ): TypesMutationPayload

  """
  Updates a single `CompoundKey` using its globally unique id and a patch.
  """
  updateCompoundKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompoundKeyInput!
  ): UpdateCompoundKeyPayload

  """Updates a single `CompoundKey` using a unique key and a patch."""
  updateCompoundKeyByPersonId1AndPersonId2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompoundKeyByPersonId1AndPersonId2Input!
  ): UpdateCompoundKeyPayload

  """Updates a single `Issue756` using its globally unique id and a patch."""
  updateIssue756(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIssue756Input!
  ): UpdateIssue756Payload

  """Updates a single `Issue756` using a unique key and a patch."""
  updateIssue756ById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIssue756ByIdInput!
  ): UpdateIssue756Payload

  """Updates a single `LeftArm` using its globally unique id and a patch."""
  updateLeftArm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLeftArmInput!
  ): UpdateLeftArmPayload

  """Updates a single `LeftArm` using a unique key and a patch."""
  updateLeftArmById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLeftArmByIdInput!
  ): UpdateLeftArmPayload

  """Updates a single `LeftArm` using a unique key and a patch."""
  updateLeftArmByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateLeftArmByPersonIdInput!
  ): UpdateLeftArmPayload

  """Updates a single `MyTable` using its globally unique id and a patch."""
  updateMyTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMyTableInput!
  ): UpdateMyTablePayload

  """Updates a single `MyTable` using a unique key and a patch."""
  updateMyTableById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMyTableByIdInput!
  ): UpdateMyTablePayload

  """
  Updates a single `NullTestRecord` using its globally unique id and a patch.
  """
  updateNullTestRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNullTestRecordInput!
  ): UpdateNullTestRecordPayload

  """Updates a single `NullTestRecord` using a unique key and a patch."""
  updateNullTestRecordById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNullTestRecordByIdInput!
  ): UpdateNullTestRecordPayload

  """Updates a single `Person` using its globally unique id and a patch."""
  updatePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePersonByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonByEmailInput!
  ): UpdatePersonPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePersonById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonByIdInput!
  ): UpdatePersonPayload

  """
  Updates a single `PersonSecret` using its globally unique id and a patch.
  """
  updatePersonSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonSecretInput!
  ): UpdatePersonSecretPayload @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """Updates a single `PersonSecret` using a unique key and a patch."""
  updatePersonSecretByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonSecretByPersonIdInput!
  ): UpdatePersonSecretPayload @deprecated(reason: "This is deprecated (comment on table c.person_secret).")
}

"""All input for the `mutationInInout` mutation."""
input MutationInInoutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i: Int
  ino: Int
}

"""The output of our `mutationInInout` mutation."""
type MutationInInoutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  ino: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `mutationInOut` mutation."""
input MutationInOutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i: Int
}

"""The output of our `mutationInOut` mutation."""
type MutationInOutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  o: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `mutationOutComplex` mutation."""
input MutationOutComplexInput {
  a: Int
  b: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationOutComplex` mutation."""
type MutationOutComplexPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: MutationOutComplexRecord
}

type MutationOutComplexRecord {
  x: Int
  y: CompoundType
  z: Person
}

"""All input for the `mutationOutComplexSetof` mutation."""
input MutationOutComplexSetofInput {
  a: Int
  b: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationOutComplexSetof` mutation."""
type MutationOutComplexSetofPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  results: [MutationOutComplexSetofRecord!]
}

type MutationOutComplexSetofRecord {
  x: Int
  y: CompoundType
  z: Person
}

"""All input for the `mutationOut` mutation."""
input MutationOutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `mutationOutOutCompoundType` mutation."""
input MutationOutOutCompoundTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i1: Int
}

"""The output of our `mutationOutOutCompoundType` mutation."""
type MutationOutOutCompoundTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: MutationOutOutCompoundTypeRecord
}

type MutationOutOutCompoundTypeRecord {
  o1: Int
  o2: CompoundType
}

"""All input for the `mutationOutOut` mutation."""
input MutationOutOutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationOutOut` mutation."""
type MutationOutOutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: MutationOutOutRecord
}

type MutationOutOutRecord {
  firstOut: Int
  secondOut: String
}

"""All input for the `mutationOutOutSetof` mutation."""
input MutationOutOutSetofInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationOutOutSetof` mutation."""
type MutationOutOutSetofPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  results: [MutationOutOutSetofRecord!]
}

type MutationOutOutSetofRecord {
  o1: Int
  o2: String
}

"""All input for the `mutationOutOutUnnamed` mutation."""
input MutationOutOutUnnamedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationOutOutUnnamed` mutation."""
type MutationOutOutUnnamedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: MutationOutOutUnnamedRecord
}

type MutationOutOutUnnamedRecord {
  arg1: Int
  arg2: String
}

"""The output of our `mutationOut` mutation."""
type MutationOutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  o: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `mutationOutSetof` mutation."""
input MutationOutSetofInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationOutSetof` mutation."""
type MutationOutSetofPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  os: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `mutationOutTable` mutation."""
input MutationOutTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationOutTable` mutation."""
type MutationOutTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `mutationOutTableSetof` mutation."""
input MutationOutTableSetofInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationOutTableSetof` mutation."""
type MutationOutTableSetofPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  people: [Person!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `mutationOutUnnamed` mutation."""
input MutationOutUnnamedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `mutationOutUnnamedOutOutUnnamed` mutation."""
input MutationOutUnnamedOutOutUnnamedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationOutUnnamedOutOutUnnamed` mutation."""
type MutationOutUnnamedOutOutUnnamedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: MutationOutUnnamedOutOutUnnamedRecord
}

type MutationOutUnnamedOutOutUnnamedRecord {
  arg1: Int
  arg3: Int
  o2: String
}

"""The output of our `mutationOutUnnamed` mutation."""
type MutationOutUnnamedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `mutationReturnsTableMultiCol` mutation."""
input MutationReturnsTableMultiColInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i: Int
}

"""The output of our `mutationReturnsTableMultiCol` mutation."""
type MutationReturnsTableMultiColPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  results: [MutationReturnsTableMultiColRecord!]
}

type MutationReturnsTableMultiColRecord {
  col1: Int
  col2: String
}

"""All input for the `mutationReturnsTableOneCol` mutation."""
input MutationReturnsTableOneColInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i: Int
}

"""The output of our `mutationReturnsTableOneCol` mutation."""
type MutationReturnsTableOneColPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  col1S: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type MyTable implements Node {
  id: Int!
  jsonData: JSON

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `MyTable` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MyTableCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON
}

"""An input for mutations affecting `MyTable`"""
input MyTableInput {
  id: Int
  jsonData: JSON
}

"""
Represents an update to a `MyTable`. Fields that are set will be updated.
"""
input MyTablePatch {
  id: Int
  jsonData: JSON
}

"""Methods to use when ordering `MyTable`."""
enum MyTablesOrderBy {
  ID_ASC
  ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type NestedCompoundType {
  a: CompoundType
  b: CompoundType
  bazBuz: Int
}

"""All input for the `noArgsMutation` mutation."""
input NoArgsMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `noArgsMutation` mutation."""
type NoArgsMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

scalar NotNullTimestamp

scalar NotNullUrl

type NullTestRecord implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  nonNullText: String!
  nullableInt: Int
  nullableText: String
}

"""
A condition to be used against `NullTestRecord` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NullTestRecordCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `nonNullText` field."""
  nonNullText: String

  """Checks for equality with the object’s `nullableInt` field."""
  nullableInt: Int

  """Checks for equality with the object’s `nullableText` field."""
  nullableText: String
}

"""An input for mutations affecting `NullTestRecord`"""
input NullTestRecordInput {
  id: Int
  nonNullText: String!
  nullableInt: Int
  nullableText: String
}

"""
Represents an update to a `NullTestRecord`. Fields that are set will be updated.
"""
input NullTestRecordPatch {
  id: Int
  nonNullText: String
  nullableInt: Int
  nullableText: String
}

"""Methods to use when ordering `NullTestRecord`."""
enum NullTestRecordsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  NON_NULL_TEXT_ASC
  NON_NULL_TEXT_DESC
  NULLABLE_INT_ASC
  NULLABLE_INT_DESC
  NULLABLE_TEXT_ASC
  NULLABLE_TEXT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Person`."""
enum PeopleOrderBy {
  ABOUT_ASC
  ABOUT_DESC
  COMPUTED_OUT_ASC
  COMPUTED_OUT_DESC
  CONFIG_ASC
  CONFIG_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_LOGIN_FROM_IP_ASC
  LAST_LOGIN_FROM_IP_DESC
  LAST_LOGIN_FROM_SUBNET_ASC
  LAST_LOGIN_FROM_SUBNET_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SITE_ASC
  SITE_DESC
  USER_MAC_ASC
  USER_MAC_DESC
}

"""Person test comment"""
type Person implements Node {
  about: String
  aliases: [String]!

  """Reads and enables pagination through a set of `CompoundKey`."""
  compoundKeysByPersonId1List(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompoundKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CompoundKey`."""
    orderBy: [CompoundKeysOrderBy!]
  ): [CompoundKey!]!

  """Reads and enables pagination through a set of `CompoundKey`."""
  compoundKeysByPersonId2List(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompoundKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CompoundKey`."""
    orderBy: [CompoundKeysOrderBy!]
  ): [CompoundKey!]!
  computedComplex(a: Int, b: String): PersonComputedComplexRecord
  computedFirstArgInout: Person
  computedFirstArgInoutOut: PersonComputedFirstArgInoutOutRecord
  computedInout(ino: String): String
  computedInoutOut(ino: String): PersonComputedInoutOutRecord
  computedOut: String!
  computedOutOut: PersonComputedOutOutRecord
  config: KeyValueHash
  createdAt: Datetime
  email: Email!
  exists(email: Email): Boolean @deprecated(reason: "This is deprecated (comment on function c.person_exists).")

  """The first name of the person."""
  firstName: String

  """The first post by the person."""
  firstPost: Post
  friendsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]
  ): [Person!]

  """The primary unique identifier for the person"""
  id: Int!
  lastLoginFromIp: InternetAddress
  lastLoginFromSubnet: String

  """Reads a single `LeftArm` that is related to this `Person`."""
  leftArmByPersonId: LeftArm

  """The person’s name"""
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  optionalMissingMiddle1(arg0: Int!, b: Int, c: Int): Int
  optionalMissingMiddle2(a: Int!, b: Int, c: Int): Int
  optionalMissingMiddle3(a: Int!, arg1: Int, c: Int): Int
  optionalMissingMiddle4(arg0: Int!, arg2: Int, b: Int): Int
  optionalMissingMiddle5(a: Int!, arg1: Int, arg2: Int): Int

  """This `Person`'s `PersonSecret`."""
  personSecretByPersonId: PersonSecret @deprecated(reason: "This is deprecated (comment on table c.person_secret).")
  site: WrappedUrl @deprecated(reason: "Don’t use me")
  typeFunction(id: Int): Type
  typeFunctionConnectionList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Type!]
  typeFunctionList: [Type]
  userMac: String
}

type PersonComputedComplexRecord {
  x: Int
  y: CompoundType
  z: Person
}

type PersonComputedFirstArgInoutOutRecord {
  o: Int
  person: Person
}

type PersonComputedInoutOutRecord {
  ino: String
  o: String
}

type PersonComputedOutOutRecord {
  o1: String
  o2: String
}

"""
A condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s `about` field."""
  about: String

  """Checks for equality with the object’s `aliases` field."""
  aliases: [String]

  """Checks for equality with the object’s `computedOut` field."""
  computedOut: String

  """Checks for equality with the object’s `config` field."""
  config: KeyValueHash

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: Email

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lastLoginFromIp` field."""
  lastLoginFromIp: InternetAddress

  """Checks for equality with the object’s `lastLoginFromSubnet` field."""
  lastLoginFromSubnet: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `site` field."""
  site: WrappedUrlInput

  """Checks for equality with the object’s `userMac` field."""
  userMac: String
}

"""An input for mutations affecting `Person`"""
input PersonInput {
  about: String
  aliases: [String]
  config: KeyValueHash
  createdAt: Datetime
  email: Email!

  """The primary unique identifier for the person"""
  id: Int
  lastLoginFromIp: InternetAddress
  lastLoginFromSubnet: String

  """The person’s name"""
  name: String!
  site: WrappedUrlInput
  userMac: String
}

"""
Represents an update to a `Person`. Fields that are set will be updated.
"""
input PersonPatch {
  about: String
  aliases: [String]
  config: KeyValueHash
  createdAt: Datetime
  email: Email

  """The primary unique identifier for the person"""
  id: Int
  lastLoginFromIp: InternetAddress
  lastLoginFromSubnet: String

  """The person’s name"""
  name: String
  site: WrappedUrlInput
  userMac: String
}

"""Tracks the person's secret"""
type PersonSecret implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """The `Person` this `PersonSecret` belongs to."""
  personByPersonId: Person
  personId: Int!

  """A secret held by the associated Person"""
  secret: String
}

"""
A condition to be used against `PersonSecret` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersonSecretCondition {
  """Checks for equality with the object’s `personId` field."""
  personId: Int

  """Checks for equality with the object’s `secret` field."""
  secret: String
}

"""An input for mutations affecting `PersonSecret`"""
input PersonSecretInput {
  personId: Int!

  """A secret held by the associated Person"""
  secret: String
}

"""
Represents an update to a `PersonSecret`. Fields that are set will be updated.
"""
input PersonSecretPatch {
  personId: Int

  """A secret held by the associated Person"""
  secret: String
}

"""Methods to use when ordering `PersonSecret`."""
enum PersonSecretsOrderBy {
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SECRET_ASC
  SECRET_DESC
}

"""A cartesian point."""
type Point {
  x: Float!
  y: Float!
}

type Post {
  authorId: Int
  body: String
  comptypes: [Comptype]
  enums: [AnEnum]
  headline: String!
  id: Int!
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads a set of `CompoundKey`."""
  allCompoundKeysList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompoundKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CompoundKey`."""
    orderBy: [CompoundKeysOrderBy!]
  ): [CompoundKey!]

  """Reads a set of `EdgeCase`."""
  allEdgeCasesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EdgeCaseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `EdgeCase`."""
    orderBy: [EdgeCasesOrderBy!]
  ): [EdgeCase!]

  """Reads a set of `Issue756`."""
  allIssue756SList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: Issue756Condition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Issue756`."""
    orderBy: [Issue756SOrderBy!]
  ): [Issue756!]

  """Reads a set of `LeftArm`."""
  allLeftArmsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LeftArmCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `LeftArm`."""
    orderBy: [LeftArmsOrderBy!]
  ): [LeftArm!]

  """Reads a set of `MyTable`."""
  allMyTablesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MyTableCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MyTable`."""
    orderBy: [MyTablesOrderBy!]
  ): [MyTable!]

  """Reads a set of `NullTestRecord`."""
  allNullTestRecordsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NullTestRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `NullTestRecord`."""
    orderBy: [NullTestRecordsOrderBy!]
  ): [NullTestRecord!]

  """Reads a set of `Person`."""
  allPeopleList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]
  ): [Person!]

  """Reads a set of `PersonSecret`."""
  allPersonSecretsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonSecretCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PersonSecret`."""
    orderBy: [PersonSecretsOrderBy!]
  ): [PersonSecret!] @deprecated(reason: "This is deprecated (comment on table c.person_secret).")
  badlyBehavedFunctionList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Person!] @deprecated(reason: "This is deprecated (comment on function c.badly_behaved_function).")

  """Reads a single `CompoundKey` using its globally unique `ID`."""
  compoundKey(
    """
    The globally unique `ID` to be used in selecting a single `CompoundKey`.
    """
    nodeId: ID!
  ): CompoundKey

  """Get a single `CompoundKey`."""
  compoundKeyByPersonId1AndPersonId2(personId1: Int!, personId2: Int!): CompoundKey
  compoundTypeSetQueryList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [CompoundType!]
  currentUserId: Int
  funcInInout(i: Int, ino: Int): Int
  funcInOut(i: Int): Int
  funcOut: Int
  funcOutComplex(a: Int, b: String): FuncOutComplexRecord
  funcOutComplexSetofList(
    a: Int
    b: String

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [FuncOutComplexSetofRecord!]
  funcOutOut: FuncOutOutRecord
  funcOutOutCompoundType(i1: Int): FuncOutOutCompoundTypeRecord
  funcOutOutSetofList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [FuncOutOutSetofRecord!]
  funcOutOutUnnamed: FuncOutOutUnnamedRecord
  funcOutSetofList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Int!]
  funcOutTable: Person
  funcOutTableSetofList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Person!]
  funcOutUnnamed: Int
  funcOutUnnamedOutOutUnnamed: FuncOutUnnamedOutOutUnnamedRecord
  funcReturnsTableMultiColList(
    a: Int
    b: Int

    """Only read the first `n` values of the set."""
    first: Int
    i: Int

    """Skip the first `n` values."""
    offset: Int
  ): [FuncReturnsTableMultiColRecord!]
  funcReturnsTableOneColList(
    """Only read the first `n` values of the set."""
    first: Int
    i: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Int!]
  intSetQueryList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
    x: Int
    y: Int
    z: Int
  ): [Int!]

  """Reads a single `Issue756` using its globally unique `ID`."""
  issue756(
    """The globally unique `ID` to be used in selecting a single `Issue756`."""
    nodeId: ID!
  ): Issue756

  """Get a single `Issue756`."""
  issue756ById(id: Int!): Issue756
  jsonIdentity(json: JSON): JSON
  jsonbIdentity(json: JSON): JSON

  """Reads a single `LeftArm` using its globally unique `ID`."""
  leftArm(
    """The globally unique `ID` to be used in selecting a single `LeftArm`."""
    nodeId: ID!
  ): LeftArm

  """Get a single `LeftArm`."""
  leftArmById(id: Int!): LeftArm

  """Get a single `LeftArm`."""
  leftArmByPersonId(personId: Int!): LeftArm

  """Reads a single `MyTable` using its globally unique `ID`."""
  myTable(
    """The globally unique `ID` to be used in selecting a single `MyTable`."""
    nodeId: ID!
  ): MyTable

  """Get a single `MyTable`."""
  myTableById(id: Int!): MyTable
  noArgsQuery: Int

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Reads a single `NullTestRecord` using its globally unique `ID`."""
  nullTestRecord(
    """
    The globally unique `ID` to be used in selecting a single `NullTestRecord`.
    """
    nodeId: ID!
  ): NullTestRecord

  """Get a single `NullTestRecord`."""
  nullTestRecordById(id: Int!): NullTestRecord

  """Reads a single `Person` using its globally unique `ID`."""
  person(
    """The globally unique `ID` to be used in selecting a single `Person`."""
    nodeId: ID!
  ): Person

  """Get a single `Person`."""
  personByEmail(email: Email!): Person

  """Get a single `Person`."""
  personById(id: Int!): Person

  """Reads a single `PersonSecret` using its globally unique `ID`."""
  personSecret(
    """
    The globally unique `ID` to be used in selecting a single `PersonSecret`.
    """
    nodeId: ID!
  ): PersonSecret @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """Get a single `PersonSecret`."""
  personSecretByPersonId(personId: Int!): PersonSecret @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  queryOutputTwoRows(leftArmId: Int, postId: Int, txt: String): QueryOutputTwoRowsRecord
  returnTableWithoutGrants: CompoundKey
  searchTestSummariesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [SearchTestSummariesRecord!]
  tableQuery(id: Int): Post
  tableSetQueryList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!]
  ): [Person!]
  tableSetQueryPlpgsqlList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int
  ): [Person!]
  typesQuery(a: BigInt!, b: Boolean!, c: String!, d: [Int]!, e: JSON!, f: FloatRangeInput!): Boolean
}

type QueryOutputTwoRowsRecord {
  leftArm: LeftArm
  post: Post
  txt: String
}

"""A builtin object identifier type for a relation name"""
scalar RegClass

"""A builtin object identifier type for a text search configuration"""
scalar RegConfig

"""A builtin object identifier type for a text search dictionary"""
scalar RegDictionary

"""A builtin object identifier type for an operator"""
scalar RegOper

"""A builtin object identifier type for an operator with argument types"""
scalar RegOperator

"""A builtin object identifier type for a function name"""
scalar RegProc

"""A builtin object identifier type for a function with argument types"""
scalar RegProcedure

"""A builtin object identifier type for a data type name"""
scalar RegType

type SearchTestSummariesRecord {
  id: Int
  totalDuration: Interval
}

"""All input for the `tableMutation` mutation."""
input TableMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int
}

"""The output of our `tableMutation` mutation."""
type TableMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `tableSetMutation` mutation."""
input TableSetMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `tableSetMutation` mutation."""
type TableSetMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  people: [Person!]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The exact time of day, does not include the date. May or may not have a timezone offset.
"""
scalar Time

type Type {
  anIntRange: AnIntRange!
  bigint: BigInt!
  boolean: Boolean!
  bytea: Base64EncodedBinary
  byteaArray: [Base64EncodedBinary]
  cidr: String
  compoundType: CompoundType!
  date: Date!
  daterange: DateRange!
  decimal: BigFloat!
  domain: AnInt!
  domain2: AnotherInt!
  enum: Color!
  enumArray: [Color]!
  id: Int!
  inet: InternetAddress
  int8ArrayDomain: [BigInt]
  interval: Interval!
  intervalArray: [Interval]!
  json: JSON!
  jsonb: JSON!
  ltree: LTree
  ltreeArray: [LTree]
  macaddr: String
  money: Float!
  nestedCompoundType: NestedCompoundType!
  nullableCompoundType: CompoundType
  nullableNestedCompoundType: NestedCompoundType
  nullablePoint: Point
  nullableRange: BigFloatRange
  numeric: BigFloat!
  numrange: BigFloatRange!
  point: Point!
  regclass: RegClass
  regconfig: RegConfig
  regdictionary: RegDictionary
  regoper: RegOper
  regoperator: RegOperator
  regproc: RegProc
  regprocedure: RegProcedure
  regtype: RegType
  smallint: Int!
  textArray: [String]!
  textArrayDomain: [String]
  time: Time!
  timestamp: Datetime!
  timestamptz: Datetime!
  timetz: Time!
  varchar: String!
}

"""All input for the `typesMutation` mutation."""
input TypesMutationInput {
  a: BigInt!
  b: Boolean!
  c: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  d: [Int]!
  e: JSON!
  f: FloatRangeInput!
}

"""The output of our `typesMutation` mutation."""
type TypesMutationPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateCompoundKeyByPersonId1AndPersonId2` mutation."""
input UpdateCompoundKeyByPersonId1AndPersonId2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CompoundKey` being updated.
  """
  compoundKeyPatch: CompoundKeyPatch!
  personId1: Int!
  personId2: Int!
}

"""All input for the `updateCompoundKey` mutation."""
input UpdateCompoundKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CompoundKey` being updated.
  """
  compoundKeyPatch: CompoundKeyPatch!

  """
  The globally unique `ID` which will identify a single `CompoundKey` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `CompoundKey` mutation."""
type UpdateCompoundKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CompoundKey` that was updated by this mutation."""
  compoundKey: CompoundKey

  """Reads a single `Person` that is related to this `CompoundKey`."""
  personByPersonId1: Person

  """Reads a single `Person` that is related to this `CompoundKey`."""
  personByPersonId2: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateIssue756ById` mutation."""
input UpdateIssue756ByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Issue756` being updated.
  """
  issue756Patch: Issue756Patch!
}

"""All input for the `updateIssue756` mutation."""
input UpdateIssue756Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Issue756` being updated.
  """
  issue756Patch: Issue756Patch!

  """
  The globally unique `ID` which will identify a single `Issue756` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `Issue756` mutation."""
type UpdateIssue756Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Issue756` that was updated by this mutation."""
  issue756: Issue756

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateLeftArmById` mutation."""
input UpdateLeftArmByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `LeftArm` being updated.
  """
  leftArmPatch: LeftArmPatch!
}

"""All input for the `updateLeftArmByPersonId` mutation."""
input UpdateLeftArmByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LeftArm` being updated.
  """
  leftArmPatch: LeftArmPatch!
  personId: Int!
}

"""All input for the `updateLeftArm` mutation."""
input UpdateLeftArmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `LeftArm` being updated.
  """
  leftArmPatch: LeftArmPatch!

  """
  The globally unique `ID` which will identify a single `LeftArm` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `LeftArm` mutation."""
type UpdateLeftArmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `LeftArm` that was updated by this mutation."""
  leftArm: LeftArm

  """Reads a single `Person` that is related to this `LeftArm`."""
  personByPersonId: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMyTableById` mutation."""
input UpdateMyTableByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `MyTable` being updated.
  """
  myTablePatch: MyTablePatch!
}

"""All input for the `updateMyTable` mutation."""
input UpdateMyTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MyTable` being updated.
  """
  myTablePatch: MyTablePatch!

  """
  The globally unique `ID` which will identify a single `MyTable` to be updated.
  """
  nodeId: ID!
}

"""The output of our update `MyTable` mutation."""
type UpdateMyTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MyTable` that was updated by this mutation."""
  myTable: MyTable

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNullTestRecordById` mutation."""
input UpdateNullTestRecordByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `NullTestRecord` being updated.
  """
  nullTestRecordPatch: NullTestRecordPatch!
}

"""All input for the `updateNullTestRecord` mutation."""
input UpdateNullTestRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `NullTestRecord` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `NullTestRecord` being updated.
  """
  nullTestRecordPatch: NullTestRecordPatch!
}

"""The output of our update `NullTestRecord` mutation."""
type UpdateNullTestRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NullTestRecord` that was updated by this mutation."""
  nullTestRecord: NullTestRecord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePersonByEmail` mutation."""
input UpdatePersonByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: Email!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  personPatch: PersonPatch!
}

"""All input for the `updatePersonById` mutation."""
input UpdatePersonByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the person"""
  id: Int!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  personPatch: PersonPatch!
}

"""All input for the `updatePerson` mutation."""
input UpdatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Person` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  personPatch: PersonPatch!
}

"""The output of our update `Person` mutation."""
type UpdatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was updated by this mutation."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePersonSecretByPersonId` mutation."""
input UpdatePersonSecretByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: Int!

  """
  An object where the defined keys will be set on the `PersonSecret` being updated.
  """
  personSecretPatch: PersonSecretPatch!
}

"""All input for the `updatePersonSecret` mutation."""
input UpdatePersonSecretInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PersonSecret` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PersonSecret` being updated.
  """
  personSecretPatch: PersonSecretPatch!
}

"""The output of our update `PersonSecret` mutation."""
type UpdatePersonSecretPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` this `PersonSecret` belongs to."""
  personByPersonId: Person

  """The `PersonSecret` that was updated by this mutation."""
  personSecret: PersonSecret

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type WrappedUrl {
  url: NotNullUrl!
}

"""An input for mutations affecting `WrappedUrl`"""
input WrappedUrlInput {
  url: NotNullUrl!
}
