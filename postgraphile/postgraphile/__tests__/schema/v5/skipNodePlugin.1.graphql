"""All input for the `add1Mutation` mutation."""
input Add1MutationInput {
  arg0: Int!
  arg1: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `add1Mutation` mutation."""
type Add1MutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int!
}

"""All input for the `add2Mutation` mutation."""
input Add2MutationInput {
  a: Int!
  b: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `add2Mutation` mutation."""
type Add2MutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `add3Mutation` mutation."""
input Add3MutationInput {
  a: Int
  arg1: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `add3Mutation` mutation."""
type Add3MutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `add4MutationError` mutation."""
input Add4MutationErrorInput {
  arg0: Int
  b: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `add4MutationError` mutation."""
type Add4MutationErrorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `add4Mutation` mutation."""
input Add4MutationInput {
  arg0: Int
  b: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `add4Mutation` mutation."""
type Add4MutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

enum AnEnum {
  ASTERISK
  ASTERISK__ASTERISK
  ASTERISK__ASTERISK__ASTERISK
  ASTERISK_bar
  ASTERISK_bar_
  ASTERISK_baz_ASTERISK
  DOLLAR
  GREATER_THAN_OR_EQUAL
  LIKE
  PERCENT
  _ASTERISK_bar_
  _ASTERISK_baz_ASTERISK_
  _foo_ASTERISK
  awaiting
  foo_ASTERISK
  foo_ASTERISK_
  published
  rejected
}

scalar AnInt

"""A range of `AnInt`."""
type AnIntRange {
  """The ending bound of our range."""
  end: AnIntRangeBound

  """The starting bound of our range."""
  start: AnIntRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type AnIntRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: AnInt!
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
input AnIntRangeBoundInput {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: AnInt!
}

"""A range of `AnInt`."""
input AnIntRangeInput {
  """The ending bound of our range."""
  end: AnIntRangeBoundInput

  """The starting bound of our range."""
  start: AnIntRangeBoundInput
}

scalar BAnotherInt

type BAuthPayload {
  admin: Boolean

  """Reads a single `CPerson` that is related to this `BAuthPayload`."""
  cPersonByRowId: CPerson
  jwt: BJwtToken
  rowId: Int
}

"""All input for the `bAuthenticateFail` mutation."""
input BAuthenticateFailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `bAuthenticateFail` mutation."""
type BAuthenticateFailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: BJwtToken
}

"""All input for the `bAuthenticate` mutation."""
input BAuthenticateInput {
  a: Int
  b: BigFloat
  c: BigInt

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `bAuthenticateMany` mutation."""
input BAuthenticateManyInput {
  a: Int
  b: BigFloat
  c: BigInt

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `bAuthenticateMany` mutation."""
type BAuthenticateManyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [BJwtToken]
}

"""The output of our `bAuthenticate` mutation."""
type BAuthenticatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: BJwtToken
}

"""All input for the `bAuthenticatePayload` mutation."""
input BAuthenticatePayloadInput {
  a: Int
  b: BigFloat
  c: BigInt

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `bAuthenticatePayload` mutation."""
type BAuthenticatePayloadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: BAuthPayload
}

"""Represents the colours red, green and blue."""
enum BColor {
  blue
  green
  red
}

"""All input for the `bCompoundTypeArrayMutation` mutation."""
input BCompoundTypeArrayMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  object: CCompoundTypeInput
}

"""The output of our `bCompoundTypeArrayMutation` mutation."""
type BCompoundTypeArrayMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CCompoundType]
}

"""All input for the `bCompoundTypeMutation` mutation."""
input BCompoundTypeMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  object: CCompoundTypeInput
}

"""The output of our `bCompoundTypeMutation` mutation."""
type BCompoundTypeMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: CCompoundType
}

"""All input for the `bCompoundTypeSetMutation` mutation."""
input BCompoundTypeSetMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  object: CCompoundTypeInput
}

"""The output of our `bCompoundTypeSetMutation` mutation."""
type BCompoundTypeSetMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CCompoundType]
}

scalar BEmail

enum BEnumCaps {
  BAR_FOO
  BAZ_QUX
  FOO_BAR
  _0_BAR
}

enum BEnumWithEmptyString {
  _EMPTY_
  one
  two
}

scalar BGuid

"""All input for the `bGuidFn` mutation."""
input BGuidFnInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  g: BGuid
}

"""The output of our `bGuidFn` mutation."""
type BGuidFnPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: BGuid
}

type BJwtToken {
  a: Int
  b: BigFloat
  c: BigInt
  exp: BigInt
  role: String
}

type BList {
  byteaArray: [Base64EncodedBinary]
  byteaArrayNn: [Base64EncodedBinary]!
  compoundTypeArray: [CCompoundType]
  compoundTypeArrayNn: [CCompoundType]!
  dateArray: [Date]
  dateArrayNn: [Date]!
  enumArray: [BColor]
  enumArrayNn: [BColor]!
  intArray: [Int]
  intArrayNn: [Int]!
  rowId: Int!
  timestamptzArray: [Datetime]
  timestamptzArrayNn: [Datetime]!
}

"""All input for the `bListBdeMutation` mutation."""
input BListBdeMutationInput {
  b: [String]

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  d: String
  e: String
}

"""The output of our `bListBdeMutation` mutation."""
type BListBdeMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [UUID]
}

"""
A condition to be used against `BList` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BListCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `BList` values."""
type BListConnection {
  """
  A list of edges which contains the `BList` and cursor to aid in pagination.
  """
  edges: [BListEdge]!

  """A list of `BList` objects."""
  nodes: [BList]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BList` you could get from the connection."""
  totalCount: Int!
}

"""A `BList` edge in the connection."""
type BListEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BList` at the end of the edge."""
  node: BList
}

"""An input for mutations affecting `BList`"""
input BListInput {
  byteaArray: [Base64EncodedBinary]
  byteaArrayNn: [Base64EncodedBinary]!
  compoundTypeArray: [CCompoundTypeInput]
  compoundTypeArrayNn: [CCompoundTypeInput]!
  dateArray: [Date]
  dateArrayNn: [Date]!
  enumArray: [BColor]
  enumArrayNn: [BColor]!
  intArray: [Int]
  intArrayNn: [Int]!
  rowId: Int
  timestamptzArray: [Datetime]
  timestamptzArrayNn: [Datetime]!
}

"""Methods to use when ordering `BList`."""
enum BListOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `BList`. Fields that are set will be updated.
"""
input BListPatch {
  byteaArray: [Base64EncodedBinary]
  byteaArrayNn: [Base64EncodedBinary]
  compoundTypeArray: [CCompoundTypeInput]
  compoundTypeArrayNn: [CCompoundTypeInput]
  dateArray: [Date]
  dateArrayNn: [Date]
  enumArray: [BColor]
  enumArrayNn: [BColor]
  intArray: [Int]
  intArrayNn: [Int]
  rowId: Int
  timestamptzArray: [Datetime]
  timestamptzArrayNn: [Datetime]
}

"""All input for the `bMult1` mutation."""
input BMult1Input {
  arg0: Int
  arg1: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `bMult1` mutation."""
type BMult1Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `bMult2` mutation."""
input BMult2Input {
  arg0: Int
  arg1: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `bMult2` mutation."""
type BMult2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `bMult3` mutation."""
input BMult3Input {
  arg0: Int!
  arg1: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `bMult3` mutation."""
type BMult3Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `bMult4` mutation."""
input BMult4Input {
  arg0: Int!
  arg1: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `bMult4` mutation."""
type BMult4Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

type BNestedCompoundType {
  a: CCompoundType
  b: CCompoundType
  bazBuz: Int
}

"""An input for mutations affecting `BNestedCompoundType`"""
input BNestedCompoundTypeInput {
  a: CCompoundTypeInput
  b: CCompoundTypeInput
  bazBuz: Int
}

scalar BNotNullUrl

type BType {
  anIntRange: AnIntRange!
  bigint: BigInt!
  boolean: Boolean!
  bytea: Base64EncodedBinary
  byteaArray: [Base64EncodedBinary]
  cidr: CidrAddress
  compoundType: CCompoundType!
  date: Date!
  daterange: DateRange!
  decimal: BigFloat!
  domain: AnInt!
  domain2: BAnotherInt!
  enum: BColor!
  enumArray: [BColor]!
  inet: InternetAddress
  int8ArrayDomain: [BigInt]
  interval: Interval!
  intervalArray: [Interval]!
  json: JSON!
  jsonb: JSON!
  ltree: LTree
  ltreeArray: [LTree]
  macaddr: MacAddress
  money: Float!
  nestedCompoundType: BNestedCompoundType!
  nullableCompoundType: CCompoundType
  nullableNestedCompoundType: BNestedCompoundType
  nullablePoint: Point
  nullableRange: BigFloatRange
  numeric: BigFloat!
  numrange: BigFloatRange!
  point: Point!

  """Reads a single `Post` that is related to this `BType`."""
  postByRowId: Post

  """Reads a single `Post` that is related to this `BType`."""
  postBySmallint: Post
  regclass: RegClass
  regconfig: RegConfig
  regdictionary: RegDictionary
  regoper: RegOper
  regoperator: RegOperator
  regproc: RegProc
  regprocedure: RegProcedure
  regtype: RegType
  rowId: Int!
  smallint: Int!
  textArray: [String]!
  textArrayDomain: [String]
  time: Time!
  timestamp: Datetime!
  timestamptz: Datetime!
  timetz: Time!
  varchar: String!
}

"""
A condition to be used against `BType` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BTypeCondition {
  """Checks for equality with the object’s `bigint` field."""
  bigint: BigInt

  """Checks for equality with the object’s `boolean` field."""
  boolean: Boolean

  """Checks for equality with the object’s `cidr` field."""
  cidr: CidrAddress

  """Checks for equality with the object’s `date` field."""
  date: Date

  """Checks for equality with the object’s `decimal` field."""
  decimal: BigFloat

  """Checks for equality with the object’s `domain` field."""
  domain: AnInt

  """Checks for equality with the object’s `domain2` field."""
  domain2: BAnotherInt

  """Checks for equality with the object’s `enum` field."""
  enum: BColor

  """Checks for equality with the object’s `inet` field."""
  inet: InternetAddress

  """Checks for equality with the object’s `interval` field."""
  interval: IntervalInput

  """Checks for equality with the object’s `json` field."""
  json: JSON

  """Checks for equality with the object’s `jsonb` field."""
  jsonb: JSON

  """Checks for equality with the object’s `ltree` field."""
  ltree: LTree

  """Checks for equality with the object’s `macaddr` field."""
  macaddr: MacAddress

  """Checks for equality with the object’s `money` field."""
  money: Float

  """Checks for equality with the object’s `nullablePoint` field."""
  nullablePoint: PointInput

  """Checks for equality with the object’s `numeric` field."""
  numeric: BigFloat

  """Checks for equality with the object’s `point` field."""
  point: PointInput

  """Checks for equality with the object’s `regclass` field."""
  regclass: RegClass

  """Checks for equality with the object’s `regconfig` field."""
  regconfig: RegConfig

  """Checks for equality with the object’s `regdictionary` field."""
  regdictionary: RegDictionary

  """Checks for equality with the object’s `regoper` field."""
  regoper: RegOper

  """Checks for equality with the object’s `regoperator` field."""
  regoperator: RegOperator

  """Checks for equality with the object’s `regproc` field."""
  regproc: RegProc

  """Checks for equality with the object’s `regprocedure` field."""
  regprocedure: RegProcedure

  """Checks for equality with the object’s `regtype` field."""
  regtype: RegType

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `smallint` field."""
  smallint: Int

  """Checks for equality with the object’s `time` field."""
  time: Time

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `timestamptz` field."""
  timestamptz: Datetime

  """Checks for equality with the object’s `timetz` field."""
  timetz: Time

  """Checks for equality with the object’s `varchar` field."""
  varchar: String
}

"""A connection to a list of `BType` values."""
type BTypeConnection {
  """
  A list of edges which contains the `BType` and cursor to aid in pagination.
  """
  edges: [BTypeEdge]!

  """A list of `BType` objects."""
  nodes: [BType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BType` you could get from the connection."""
  totalCount: Int!
}

"""A `BType` edge in the connection."""
type BTypeEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BType` at the end of the edge."""
  node: BType
}

"""All input for the `bTypeFunctionConnectionMutation` mutation."""
input BTypeFunctionConnectionMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `bTypeFunctionConnectionMutation` mutation."""
type BTypeFunctionConnectionMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [BType]
}

"""All input for the `bTypeFunctionListMutation` mutation."""
input BTypeFunctionListMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `bTypeFunctionListMutation` mutation."""
type BTypeFunctionListMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [BType]
}

"""All input for the `bTypeFunctionMutation` mutation."""
input BTypeFunctionMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int
}

"""The output of our `bTypeFunctionMutation` mutation."""
type BTypeFunctionMutationPayload {
  """An edge for our `BType`. May be used by Relay 1."""
  bTypeEdge(
    """The method to use when ordering `BType`."""
    orderBy: [BTypeOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BTypeEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: BType
}

"""An input for mutations affecting `BType`"""
input BTypeInput {
  anIntRange: AnIntRangeInput!
  bigint: BigInt!
  boolean: Boolean!
  bytea: Base64EncodedBinary
  byteaArray: [Base64EncodedBinary]
  cidr: CidrAddress
  compoundType: CCompoundTypeInput!
  date: Date!
  daterange: DateRangeInput!
  decimal: BigFloat!
  domain: AnInt!
  domain2: BAnotherInt!
  enum: BColor!
  enumArray: [BColor]!
  inet: InternetAddress
  int8ArrayDomain: [BigInt]
  interval: IntervalInput!
  intervalArray: [IntervalInput]!
  json: JSON!
  jsonb: JSON!
  ltree: LTree
  ltreeArray: [LTree]
  macaddr: MacAddress
  money: Float!
  nestedCompoundType: BNestedCompoundTypeInput!
  nullableCompoundType: CCompoundTypeInput
  nullableNestedCompoundType: BNestedCompoundTypeInput
  nullablePoint: PointInput
  nullableRange: BigFloatRangeInput
  numeric: BigFloat!
  numrange: BigFloatRangeInput!
  point: PointInput!
  regclass: RegClass
  regconfig: RegConfig
  regdictionary: RegDictionary
  regoper: RegOper
  regoperator: RegOperator
  regproc: RegProc
  regprocedure: RegProcedure
  regtype: RegType
  rowId: Int
  smallint: Int!
  textArray: [String]!
  textArrayDomain: [String]
  time: Time!
  timestamp: Datetime!
  timestamptz: Datetime!
  timetz: Time!
  varchar: String!
}

"""Methods to use when ordering `BType`."""
enum BTypeOrderBy {
  BIGINT_ASC
  BIGINT_DESC
  BOOLEAN_ASC
  BOOLEAN_DESC
  CIDR_ASC
  CIDR_DESC
  DATE_ASC
  DATE_DESC
  DECIMAL_ASC
  DECIMAL_DESC
  DOMAIN2_ASC
  DOMAIN2_DESC
  DOMAIN_ASC
  DOMAIN_DESC
  ENUM_ASC
  ENUM_DESC
  INET_ASC
  INET_DESC
  INTERVAL_ASC
  INTERVAL_DESC
  JSONB_ASC
  JSONB_DESC
  JSON_ASC
  JSON_DESC
  LTREE_ASC
  LTREE_DESC
  MACADDR_ASC
  MACADDR_DESC
  MONEY_ASC
  MONEY_DESC
  NATURAL
  NULLABLE_POINT_ASC
  NULLABLE_POINT_DESC
  NUMERIC_ASC
  NUMERIC_DESC
  POINT_ASC
  POINT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REGCLASS_ASC
  REGCLASS_DESC
  REGCONFIG_ASC
  REGCONFIG_DESC
  REGDICTIONARY_ASC
  REGDICTIONARY_DESC
  REGOPERATOR_ASC
  REGOPERATOR_DESC
  REGOPER_ASC
  REGOPER_DESC
  REGPROCEDURE_ASC
  REGPROCEDURE_DESC
  REGPROC_ASC
  REGPROC_DESC
  REGTYPE_ASC
  REGTYPE_DESC
  ROW_ID_ASC
  ROW_ID_DESC
  SMALLINT_ASC
  SMALLINT_DESC
  TIMESTAMPTZ_ASC
  TIMESTAMPTZ_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  TIMETZ_ASC
  TIMETZ_DESC
  TIME_ASC
  TIME_DESC
  VARCHAR_ASC
  VARCHAR_DESC
}

"""
Represents an update to a `BType`. Fields that are set will be updated.
"""
input BTypePatch {
  anIntRange: AnIntRangeInput
  bigint: BigInt
  boolean: Boolean
  bytea: Base64EncodedBinary
  byteaArray: [Base64EncodedBinary]
  cidr: CidrAddress
  compoundType: CCompoundTypeInput
  date: Date
  daterange: DateRangeInput
  decimal: BigFloat
  domain: AnInt
  domain2: BAnotherInt
  enum: BColor
  enumArray: [BColor]
  inet: InternetAddress
  int8ArrayDomain: [BigInt]
  interval: IntervalInput
  intervalArray: [IntervalInput]
  json: JSON
  jsonb: JSON
  ltree: LTree
  ltreeArray: [LTree]
  macaddr: MacAddress
  money: Float
  nestedCompoundType: BNestedCompoundTypeInput
  nullableCompoundType: CCompoundTypeInput
  nullableNestedCompoundType: BNestedCompoundTypeInput
  nullablePoint: PointInput
  nullableRange: BigFloatRangeInput
  numeric: BigFloat
  numrange: BigFloatRangeInput
  point: PointInput
  regclass: RegClass
  regconfig: RegConfig
  regdictionary: RegDictionary
  regoper: RegOper
  regoperator: RegOperator
  regproc: RegProc
  regprocedure: RegProcedure
  regtype: RegType
  rowId: Int
  smallint: Int
  textArray: [String]
  textArrayDomain: [String]
  time: Time
  timestamp: Datetime
  timestamptz: Datetime
  timetz: Time
  varchar: String
}

"""YOYOYO!!"""
type BUpdatableView {
  """This is constantly 2"""
  constant: Int
  description: String
  name: String
  x: Int
}

"""
A condition to be used against `BUpdatableView` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input BUpdatableViewCondition {
  """Checks for equality with the object’s `constant` field."""
  constant: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `x` field."""
  x: Int
}

"""A connection to a list of `BUpdatableView` values."""
type BUpdatableViewConnection {
  """
  A list of edges which contains the `BUpdatableView` and cursor to aid in pagination.
  """
  edges: [BUpdatableViewEdge]!

  """A list of `BUpdatableView` objects."""
  nodes: [BUpdatableView]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BUpdatableView` you could get from the connection."""
  totalCount: Int!
}

"""A `BUpdatableView` edge in the connection."""
type BUpdatableViewEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BUpdatableView` at the end of the edge."""
  node: BUpdatableView
}

"""An input for mutations affecting `BUpdatableView`"""
input BUpdatableViewInput {
  """This is constantly 2"""
  constant: Int
  description: String
  name: String
  x: Int
}

"""Methods to use when ordering `BUpdatableView`."""
enum BUpdatableViewOrderBy {
  CONSTANT_ASC
  CONSTANT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  X_ASC
  X_DESC
}

type BWrappedUrl {
  url: BNotNullUrl!
}

"""An input for mutations affecting `BWrappedUrl`"""
input BWrappedUrlInput {
  url: BNotNullUrl!
}

"""Binary data encoded using Base64"""
scalar Base64EncodedBinary

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A range of `BigFloat`."""
type BigFloatRange {
  """The ending bound of our range."""
  end: BigFloatRangeBound

  """The starting bound of our range."""
  start: BigFloatRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type BigFloatRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: BigFloat!
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
input BigFloatRangeBoundInput {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: BigFloat!
}

"""A range of `BigFloat`."""
input BigFloatRangeInput {
  """The ending bound of our range."""
  end: BigFloatRangeBoundInput

  """The starting bound of our range."""
  start: BigFloatRangeBoundInput
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type CCompoundKey {
  """Reads a single `CPerson` that is related to this `CCompoundKey`."""
  cPersonByPersonId1: CPerson

  """Reads a single `CPerson` that is related to this `CCompoundKey`."""
  cPersonByPersonId2: CPerson
  extra: Boolean

  """Reads and enables pagination through a set of `ForeignKey`."""
  foreignKeysByCompoundKey1AndCompoundKey2(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ForeignKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ForeignKey`."""
    orderBy: [ForeignKeyOrderBy!] = [NATURAL]
  ): ForeignKeyConnection!
  personId1: Int!
  personId2: Int!

  """
  Reads a single `UniqueForeignKey` that is related to this `CCompoundKey`.
  """
  uniqueForeignKeyByCompoundKey1AndCompoundKey2: UniqueForeignKey
}

"""
A condition to be used against `CCompoundKey` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CCompoundKeyCondition {
  """Checks for equality with the object’s `extra` field."""
  extra: Boolean

  """Checks for equality with the object’s `personId1` field."""
  personId1: Int

  """Checks for equality with the object’s `personId2` field."""
  personId2: Int
}

"""A connection to a list of `CCompoundKey` values."""
type CCompoundKeyConnection {
  """
  A list of edges which contains the `CCompoundKey` and cursor to aid in pagination.
  """
  edges: [CCompoundKeyEdge]!

  """A list of `CCompoundKey` objects."""
  nodes: [CCompoundKey]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CCompoundKey` you could get from the connection."""
  totalCount: Int!
}

"""A `CCompoundKey` edge in the connection."""
type CCompoundKeyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CCompoundKey` at the end of the edge."""
  node: CCompoundKey
}

"""An input for mutations affecting `CCompoundKey`"""
input CCompoundKeyInput {
  extra: Boolean
  personId1: Int!
  personId2: Int!
}

"""Methods to use when ordering `CCompoundKey`."""
enum CCompoundKeyOrderBy {
  EXTRA_ASC
  EXTRA_DESC
  NATURAL
  PERSON_ID_1_ASC
  PERSON_ID_1_DESC
  PERSON_ID_2_ASC
  PERSON_ID_2_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `CCompoundKey`. Fields that are set will be updated.
"""
input CCompoundKeyPatch {
  extra: Boolean
  personId1: Int
  personId2: Int
}

"""Awesome feature!"""
type CCompoundType {
  a: Int
  arrayQuery: [CCompoundType]
  b: String
  c: BColor
  computedField: Int
  d: UUID
  e: BEnumCaps
  f: BEnumWithEmptyString
  fooBar: Int
  g: Interval
  query: CCompoundType
  queryCompoundTypeArray: [CCompoundType]
}

"""A connection to a list of `CCompoundType` values."""
type CCompoundTypeConnection {
  """
  A list of edges which contains the `CCompoundType` and cursor to aid in pagination.
  """
  edges: [CCompoundTypeEdge]!

  """A list of `CCompoundType` objects."""
  nodes: [CCompoundType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CCompoundType` you could get from the connection."""
  totalCount: Int!
}

"""A `CCompoundType` edge in the connection."""
type CCompoundTypeEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CCompoundType` at the end of the edge."""
  node: CCompoundType
}

"""An input for mutations affecting `CCompoundType`"""
input CCompoundTypeInput {
  a: Int
  b: String
  c: BColor
  d: UUID
  e: BEnumCaps
  f: BEnumWithEmptyString
  fooBar: Int
  g: IntervalInput
}

type CEdgeCase {
  computed: String
  notNullHasDefault: Boolean!
  rowId: Int
  wontCastEasy: Int
}

"""
A condition to be used against `CEdgeCase` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CEdgeCaseCondition {
  """Checks for equality with the object’s `notNullHasDefault` field."""
  notNullHasDefault: Boolean

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `wontCastEasy` field."""
  wontCastEasy: Int
}

"""A connection to a list of `CEdgeCase` values."""
type CEdgeCaseConnection {
  """
  A list of edges which contains the `CEdgeCase` and cursor to aid in pagination.
  """
  edges: [CEdgeCaseEdge]!

  """A list of `CEdgeCase` objects."""
  nodes: [CEdgeCase]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CEdgeCase` you could get from the connection."""
  totalCount: Int!
}

"""A `CEdgeCase` edge in the connection."""
type CEdgeCaseEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CEdgeCase` at the end of the edge."""
  node: CEdgeCase
}

"""An input for mutations affecting `CEdgeCase`"""
input CEdgeCaseInput {
  notNullHasDefault: Boolean
  rowId: Int
  wontCastEasy: Int
}

"""Methods to use when ordering `CEdgeCase`."""
enum CEdgeCaseOrderBy {
  NATURAL
  NOT_NULL_HAS_DEFAULT_ASC
  NOT_NULL_HAS_DEFAULT_DESC
  ROW_ID_ASC
  ROW_ID_DESC
  WONT_CAST_EASY_ASC
  WONT_CAST_EASY_DESC
}

type CFuncOutComplexRecord {
  x: Int
  y: CCompoundType
  z: CPerson
}

"""A connection to a list of `CFuncOutComplexSetofRecord` values."""
type CFuncOutComplexSetofConnection {
  """
  A list of edges which contains the `CFuncOutComplexSetofRecord` and cursor to aid in pagination.
  """
  edges: [CFuncOutComplexSetofEdge]!

  """A list of `CFuncOutComplexSetofRecord` objects."""
  nodes: [CFuncOutComplexSetofRecord]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CFuncOutComplexSetofRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CFuncOutComplexSetofRecord` edge in the connection."""
type CFuncOutComplexSetofEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CFuncOutComplexSetofRecord` at the end of the edge."""
  node: CFuncOutComplexSetofRecord
}

type CFuncOutComplexSetofRecord {
  x: Int
  y: CCompoundType
  z: CPerson
}

type CFuncOutOutCompoundTypeRecord {
  o1: Int
  o2: CCompoundType
}

type CFuncOutOutRecord {
  firstOut: Int
  secondOut: String
}

"""A connection to a list of `CFuncOutOutSetofRecord` values."""
type CFuncOutOutSetofConnection {
  """
  A list of edges which contains the `CFuncOutOutSetofRecord` and cursor to aid in pagination.
  """
  edges: [CFuncOutOutSetofEdge]!

  """A list of `CFuncOutOutSetofRecord` objects."""
  nodes: [CFuncOutOutSetofRecord]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CFuncOutOutSetofRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CFuncOutOutSetofRecord` edge in the connection."""
type CFuncOutOutSetofEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CFuncOutOutSetofRecord` at the end of the edge."""
  node: CFuncOutOutSetofRecord
}

type CFuncOutOutSetofRecord {
  o1: Int
  o2: String
}

type CFuncOutOutUnnamedRecord {
  column1: Int
  column2: String
}

"""A connection to a list of `Int` values."""
type CFuncOutSetofConnection {
  """
  A list of edges which contains the `Int` and cursor to aid in pagination.
  """
  edges: [CFuncOutSetofEdge]!

  """A list of `Int` objects."""
  nodes: [Int]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Int` you could get from the connection."""
  totalCount: Int!
}

"""A `Int` edge in the connection."""
type CFuncOutSetofEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Int` at the end of the edge."""
  node: Int
}

type CFuncOutUnnamedOutOutUnnamedRecord {
  column1: Int
  column3: Int
  o2: String
}

"""A connection to a list of `CFuncReturnsTableMultiColRecord` values."""
type CFuncReturnsTableMultiColConnection {
  """
  A list of edges which contains the `CFuncReturnsTableMultiColRecord` and cursor to aid in pagination.
  """
  edges: [CFuncReturnsTableMultiColEdge]!

  """A list of `CFuncReturnsTableMultiColRecord` objects."""
  nodes: [CFuncReturnsTableMultiColRecord]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CFuncReturnsTableMultiColRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CFuncReturnsTableMultiColRecord` edge in the connection."""
type CFuncReturnsTableMultiColEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CFuncReturnsTableMultiColRecord` at the end of the edge."""
  node: CFuncReturnsTableMultiColRecord
}

type CFuncReturnsTableMultiColRecord {
  col1: Int
  col2: String
}

"""A connection to a list of `Int` values."""
type CFuncReturnsTableOneColConnection {
  """
  A list of edges which contains the `Int` and cursor to aid in pagination.
  """
  edges: [CFuncReturnsTableOneColEdge]!

  """A list of `Int` objects."""
  nodes: [Int]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Int` you could get from the connection."""
  totalCount: Int!
}

"""A `Int` edge in the connection."""
type CFuncReturnsTableOneColEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Int` at the end of the edge."""
  node: Int
}

"""All input for the `cIntSetMutation` mutation."""
input CIntSetMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  x: Int
  y: Int
  z: Int
}

"""The output of our `cIntSetMutation` mutation."""
type CIntSetMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [Int]
}

"""A connection to a list of `Int` values."""
type CIntSetQueryConnection {
  """
  A list of edges which contains the `Int` and cursor to aid in pagination.
  """
  edges: [CIntSetQueryEdge]!

  """A list of `Int` objects."""
  nodes: [Int]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Int` you could get from the connection."""
  totalCount: Int!
}

"""A `Int` edge in the connection."""
type CIntSetQueryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Int` at the end of the edge."""
  node: Int
}

type CIssue756 {
  rowId: Int!
  ts: CNotNullTimestamp!
}

"""
A condition to be used against `CIssue756` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CIssue756Condition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `ts` field."""
  ts: CNotNullTimestamp
}

"""A connection to a list of `CIssue756` values."""
type CIssue756Connection {
  """
  A list of edges which contains the `CIssue756` and cursor to aid in pagination.
  """
  edges: [CIssue756Edge]!

  """A list of `CIssue756` objects."""
  nodes: [CIssue756]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CIssue756` you could get from the connection."""
  totalCount: Int!
}

"""A `CIssue756` edge in the connection."""
type CIssue756Edge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CIssue756` at the end of the edge."""
  node: CIssue756
}

"""An input for mutations affecting `CIssue756`"""
input CIssue756Input {
  rowId: Int
  ts: CNotNullTimestamp
}

"""All input for the `cIssue756Mutation` mutation."""
input CIssue756MutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cIssue756Mutation` mutation."""
type CIssue756MutationPayload {
  """An edge for our `CIssue756`. May be used by Relay 1."""
  cIssue756Edge(
    """The method to use when ordering `CIssue756`."""
    orderBy: [CIssue756OrderBy!]! = [PRIMARY_KEY_ASC]
  ): CIssue756Edge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: CIssue756
}

"""Methods to use when ordering `CIssue756`."""
enum CIssue756OrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
  TS_ASC
  TS_DESC
}

"""
Represents an update to a `CIssue756`. Fields that are set will be updated.
"""
input CIssue756Patch {
  rowId: Int
  ts: CNotNullTimestamp
}

"""All input for the `cIssue756SetMutation` mutation."""
input CIssue756SetMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cIssue756SetMutation` mutation."""
type CIssue756SetMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CIssue756]
}

"""All input for the `cJsonIdentityMutation` mutation."""
input CJsonIdentityMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  json: JSON
}

"""The output of our `cJsonIdentityMutation` mutation."""
type CJsonIdentityMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: JSON
}

"""All input for the `cJsonbIdentityMutation` mutation."""
input CJsonbIdentityMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  json: JSON
}

"""The output of our `cJsonbIdentityMutation` mutation."""
type CJsonbIdentityMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: JSON
}

"""All input for the `cJsonbIdentityMutationPlpgsql` mutation."""
input CJsonbIdentityMutationPlpgsqlInput {
  _theJson: JSON!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cJsonbIdentityMutationPlpgsql` mutation."""
type CJsonbIdentityMutationPlpgsqlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: JSON
}

"""All input for the `cJsonbIdentityMutationPlpgsqlWithDefault` mutation."""
input CJsonbIdentityMutationPlpgsqlWithDefaultInput {
  _theJson: JSON

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cJsonbIdentityMutationPlpgsqlWithDefault` mutation."""
type CJsonbIdentityMutationPlpgsqlWithDefaultPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: JSON
}

"""Tracks metadata about the left arms of various people"""
type CLeftArm {
  """Reads a single `CPerson` that is related to this `CLeftArm`."""
  cPersonByPersonId: CPerson
  lengthInMetres: Float
  mood: String!
  personId: Int
  rowId: Int!
}

"""An input representation of `CLeftArm` with nullable fields."""
input CLeftArmBaseInput {
  lengthInMetres: Float
  mood: String
  personId: Int
  rowId: Int
}

"""
A condition to be used against `CLeftArm` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CLeftArmCondition {
  """Checks for equality with the object’s `lengthInMetres` field."""
  lengthInMetres: Float

  """Checks for equality with the object’s `mood` field."""
  mood: String

  """Checks for equality with the object’s `personId` field."""
  personId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `CLeftArm` values."""
type CLeftArmConnection {
  """
  A list of edges which contains the `CLeftArm` and cursor to aid in pagination.
  """
  edges: [CLeftArmEdge]!

  """A list of `CLeftArm` objects."""
  nodes: [CLeftArm]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CLeftArm` you could get from the connection."""
  totalCount: Int!
}

"""A `CLeftArm` edge in the connection."""
type CLeftArmEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CLeftArm` at the end of the edge."""
  node: CLeftArm
}

"""All input for the `cLeftArmIdentity` mutation."""
input CLeftArmIdentityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  leftArm: CLeftArmBaseInput
}

"""The output of our `cLeftArmIdentity` mutation."""
type CLeftArmIdentityPayload {
  """An edge for our `CLeftArm`. May be used by Relay 1."""
  cLeftArmEdge(
    """The method to use when ordering `CLeftArm`."""
    orderBy: [CLeftArmOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CLeftArmEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  leftArm: CLeftArm

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""An input for mutations affecting `CLeftArm`"""
input CLeftArmInput {
  lengthInMetres: Float
  mood: String
  personId: Int
  rowId: Int
}

"""Methods to use when ordering `CLeftArm`."""
enum CLeftArmOrderBy {
  LENGTH_IN_METRES_ASC
  LENGTH_IN_METRES_DESC
  MOOD_ASC
  MOOD_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `CLeftArm`. Fields that are set will be updated.
"""
input CLeftArmPatch {
  lengthInMetres: Float
  mood: String
  personId: Int
  rowId: Int
}

"""All input for the `cListOfCompoundTypesMutation` mutation."""
input CListOfCompoundTypesMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  records: [CCompoundTypeInput]
}

"""The output of our `cListOfCompoundTypesMutation` mutation."""
type CListOfCompoundTypesMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CCompoundType]
}

"""All input for the `cMutationInInout` mutation."""
input CMutationInInoutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i: Int
  ino: Int
}

"""The output of our `cMutationInInout` mutation."""
type CMutationInInoutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `cMutationInOut` mutation."""
input CMutationInOutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i: Int
}

"""The output of our `cMutationInOut` mutation."""
type CMutationInOutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `cMutationOutComplex` mutation."""
input CMutationOutComplexInput {
  a: Int
  b: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cMutationOutComplex` mutation."""
type CMutationOutComplexPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: CMutationOutComplexRecord
}

type CMutationOutComplexRecord {
  x: Int
  y: CCompoundType
  z: CPerson
}

"""All input for the `cMutationOutComplexSetof` mutation."""
input CMutationOutComplexSetofInput {
  a: Int
  b: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cMutationOutComplexSetof` mutation."""
type CMutationOutComplexSetofPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CMutationOutComplexSetofRecord]
}

type CMutationOutComplexSetofRecord {
  x: Int
  y: CCompoundType
  z: CPerson
}

"""All input for the `cMutationOut` mutation."""
input CMutationOutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `cMutationOutOutCompoundType` mutation."""
input CMutationOutOutCompoundTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i1: Int
}

"""The output of our `cMutationOutOutCompoundType` mutation."""
type CMutationOutOutCompoundTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: CMutationOutOutCompoundTypeRecord
}

type CMutationOutOutCompoundTypeRecord {
  o1: Int
  o2: CCompoundType
}

"""All input for the `cMutationOutOut` mutation."""
input CMutationOutOutInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cMutationOutOut` mutation."""
type CMutationOutOutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: CMutationOutOutRecord
}

type CMutationOutOutRecord {
  firstOut: Int
  secondOut: String
}

"""All input for the `cMutationOutOutSetof` mutation."""
input CMutationOutOutSetofInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cMutationOutOutSetof` mutation."""
type CMutationOutOutSetofPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CMutationOutOutSetofRecord]
}

type CMutationOutOutSetofRecord {
  o1: Int
  o2: String
}

"""All input for the `cMutationOutOutUnnamed` mutation."""
input CMutationOutOutUnnamedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cMutationOutOutUnnamed` mutation."""
type CMutationOutOutUnnamedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: CMutationOutOutUnnamedRecord
}

type CMutationOutOutUnnamedRecord {
  column1: Int
  column2: String
}

"""The output of our `cMutationOut` mutation."""
type CMutationOutPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `cMutationOutSetof` mutation."""
input CMutationOutSetofInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cMutationOutSetof` mutation."""
type CMutationOutSetofPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [Int]
}

"""All input for the `cMutationOutTable` mutation."""
input CMutationOutTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cMutationOutTable` mutation."""
type CMutationOutTablePayload {
  """An edge for our `CPerson`. May be used by Relay 1."""
  cPersonEdge(
    """The method to use when ordering `CPerson`."""
    orderBy: [CPersonOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CPersonEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: CPerson
}

"""All input for the `cMutationOutTableSetof` mutation."""
input CMutationOutTableSetofInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cMutationOutTableSetof` mutation."""
type CMutationOutTableSetofPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CPerson]
}

"""All input for the `cMutationOutUnnamed` mutation."""
input CMutationOutUnnamedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the `cMutationOutUnnamedOutOutUnnamed` mutation."""
input CMutationOutUnnamedOutOutUnnamedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cMutationOutUnnamedOutOutUnnamed` mutation."""
type CMutationOutUnnamedOutOutUnnamedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: CMutationOutUnnamedOutOutUnnamedRecord
}

type CMutationOutUnnamedOutOutUnnamedRecord {
  column1: Int
  column3: Int
  o2: String
}

"""The output of our `cMutationOutUnnamed` mutation."""
type CMutationOutUnnamedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

"""All input for the `cMutationReturnsTableMultiCol` mutation."""
input CMutationReturnsTableMultiColInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i: Int
}

"""The output of our `cMutationReturnsTableMultiCol` mutation."""
type CMutationReturnsTableMultiColPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CMutationReturnsTableMultiColRecord]
}

type CMutationReturnsTableMultiColRecord {
  col1: Int
  col2: String
}

"""All input for the `cMutationReturnsTableOneCol` mutation."""
input CMutationReturnsTableOneColInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  i: Int
}

"""The output of our `cMutationReturnsTableOneCol` mutation."""
type CMutationReturnsTableOneColPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [Int]
}

type CMyTable {
  jsonData: JSON
  rowId: Int!
}

"""
A condition to be used against `CMyTable` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CMyTableCondition {
  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `CMyTable` values."""
type CMyTableConnection {
  """
  A list of edges which contains the `CMyTable` and cursor to aid in pagination.
  """
  edges: [CMyTableEdge]!

  """A list of `CMyTable` objects."""
  nodes: [CMyTable]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CMyTable` you could get from the connection."""
  totalCount: Int!
}

"""A `CMyTable` edge in the connection."""
type CMyTableEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CMyTable` at the end of the edge."""
  node: CMyTable
}

"""An input for mutations affecting `CMyTable`"""
input CMyTableInput {
  jsonData: JSON
  rowId: Int
}

"""Methods to use when ordering `CMyTable`."""
enum CMyTableOrderBy {
  JSON_DATA_ASC
  JSON_DATA_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `CMyTable`. Fields that are set will be updated.
"""
input CMyTablePatch {
  jsonData: JSON
  rowId: Int
}

"""All input for the `cNoArgsMutation` mutation."""
input CNoArgsMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cNoArgsMutation` mutation."""
type CNoArgsMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Int
}

scalar CNotNullTimestamp

type CNullTestRecord {
  nonNullText: String!
  nullableInt: Int
  nullableText: String
  rowId: Int!
}

"""
A condition to be used against `CNullTestRecord` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CNullTestRecordCondition {
  """Checks for equality with the object’s `nonNullText` field."""
  nonNullText: String

  """Checks for equality with the object’s `nullableInt` field."""
  nullableInt: Int

  """Checks for equality with the object’s `nullableText` field."""
  nullableText: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `CNullTestRecord` values."""
type CNullTestRecordConnection {
  """
  A list of edges which contains the `CNullTestRecord` and cursor to aid in pagination.
  """
  edges: [CNullTestRecordEdge]!

  """A list of `CNullTestRecord` objects."""
  nodes: [CNullTestRecord]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CNullTestRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CNullTestRecord` edge in the connection."""
type CNullTestRecordEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CNullTestRecord` at the end of the edge."""
  node: CNullTestRecord
}

"""An input for mutations affecting `CNullTestRecord`"""
input CNullTestRecordInput {
  nonNullText: String!
  nullableInt: Int
  nullableText: String
  rowId: Int
}

"""Methods to use when ordering `CNullTestRecord`."""
enum CNullTestRecordOrderBy {
  NATURAL
  NON_NULL_TEXT_ASC
  NON_NULL_TEXT_DESC
  NULLABLE_INT_ASC
  NULLABLE_INT_DESC
  NULLABLE_TEXT_ASC
  NULLABLE_TEXT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `CNullTestRecord`. Fields that are set will be updated.
"""
input CNullTestRecordPatch {
  nonNullText: String
  nullableInt: Int
  nullableText: String
  rowId: Int
}

"""Person test comment"""
type CPerson {
  about: String
  aliases: [String]!

  """Reads and enables pagination through a set of `CCompoundKey`."""
  cCompoundKeysByPersonId1(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CCompoundKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CCompoundKey`."""
    orderBy: [CCompoundKeyOrderBy!] = [PRIMARY_KEY_ASC]
  ): CCompoundKeyConnection!

  """Reads and enables pagination through a set of `CCompoundKey`."""
  cCompoundKeysByPersonId2(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CCompoundKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CCompoundKey`."""
    orderBy: [CCompoundKeyOrderBy!] = [PRIMARY_KEY_ASC]
  ): CCompoundKeyConnection!

  """Reads a single `CLeftArm` that is related to this `CPerson`."""
  cLeftArmByPersonId: CLeftArm

  """This `Person`'s `PersonSecret`."""
  cPersonSecretByPersonId: CPersonSecret @deprecated(reason: "This is deprecated (comment on table c.person_secret).")
  computedComplex(a: Int, b: String): CPersonComputedComplexRecord
  computedFirstArgInout: CPerson
  computedFirstArgInoutOut: CPersonComputedFirstArgInoutOutRecord
  computedInout(ino: String): String
  computedInoutOut(ino: String): CPersonComputedInoutOutRecord
  computedOut: String!
  computedOutOut: CPersonComputedOutOutRecord
  config: KeyValueHash
  createdAt: Datetime
  email: BEmail!
  exists(email: BEmail): Boolean @deprecated(reason: "This is deprecated (comment on function c.person_exists).")

  """The first name of the person."""
  firstName: String

  """The first post by the person."""
  firstPost: Post

  """Reads and enables pagination through a set of `ForeignKey`."""
  foreignKeysByPersonId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ForeignKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ForeignKey`."""
    orderBy: [ForeignKeyOrderBy!] = [NATURAL]
  ): ForeignKeyConnection!

  """Reads and enables pagination through a set of `CPerson`."""
  friends(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CPersonConnection!
  lastLoginFromIp: InternetAddress
  lastLoginFromSubnet: CidrAddress

  """The person’s name"""
  name: String!
  optionalMissingMiddle1(arg0: Int!, b: Int, c: Int): Int
  optionalMissingMiddle2(a: Int!, b: Int, c: Int): Int
  optionalMissingMiddle3(a: Int!, arg1: Int, c: Int): Int
  optionalMissingMiddle4(arg0: Int!, arg2: Int, b: Int): Int
  optionalMissingMiddle5(a: Int!, arg1: Int, arg2: Int): Int

  """Reads and enables pagination through a set of `Post`."""
  postsByAuthorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Post`."""
    orderBy: [PostOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostConnection!

  """The primary unique identifier for the person"""
  rowId: Int!
  site: BWrappedUrl @deprecated(reason: "Don’t use me")
  typeFunction(id: Int): BType

  """Reads and enables pagination through a set of `BType`."""
  typeFunctionConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): BTypeConnection!
  typeFunctionList: [BType]
  userMac: MacAddress
}

type CPersonComputedComplexRecord {
  x: Int
  y: CCompoundType
  z: CPerson
}

type CPersonComputedFirstArgInoutOutRecord {
  o: Int
  person: CPerson
}

type CPersonComputedInoutOutRecord {
  ino: String
  o: String
}

type CPersonComputedOutOutRecord {
  o1: String
  o2: String
}

"""
A condition to be used against `CPerson` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CPersonCondition {
  """Checks for equality with the object’s `about` field."""
  about: String

  """Checks for equality with the object’s `config` field."""
  config: KeyValueHash

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: BEmail

  """Checks for equality with the object’s `lastLoginFromIp` field."""
  lastLoginFromIp: InternetAddress

  """Checks for equality with the object’s `lastLoginFromSubnet` field."""
  lastLoginFromSubnet: CidrAddress

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `userMac` field."""
  userMac: MacAddress
}

"""A connection to a list of `CPerson` values."""
type CPersonConnection {
  """
  A list of edges which contains the `CPerson` and cursor to aid in pagination.
  """
  edges: [CPersonEdge]!

  """A list of `CPerson` objects."""
  nodes: [CPerson]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CPerson` you could get from the connection."""
  totalCount: Int!
}

"""A `CPerson` edge in the connection."""
type CPersonEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CPerson` at the end of the edge."""
  node: CPerson
}

"""An input for mutations affecting `CPerson`"""
input CPersonInput {
  about: String
  aliases: [String]
  config: KeyValueHash
  createdAt: Datetime
  email: BEmail!
  lastLoginFromIp: InternetAddress
  lastLoginFromSubnet: CidrAddress

  """The person’s name"""
  name: String!

  """The primary unique identifier for the person"""
  rowId: Int
  site: BWrappedUrlInput
  userMac: MacAddress
}

"""Methods to use when ordering `CPerson`."""
enum CPersonOrderBy {
  ABOUT_ASC
  ABOUT_DESC
  CONFIG_ASC
  CONFIG_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  LAST_LOGIN_FROM_IP_ASC
  LAST_LOGIN_FROM_IP_DESC
  LAST_LOGIN_FROM_SUBNET_ASC
  LAST_LOGIN_FROM_SUBNET_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
  USER_MAC_ASC
  USER_MAC_DESC
}

"""
Represents an update to a `CPerson`. Fields that are set will be updated.
"""
input CPersonPatch {
  about: String
  aliases: [String]
  config: KeyValueHash
  createdAt: Datetime
  email: BEmail
  lastLoginFromIp: InternetAddress
  lastLoginFromSubnet: CidrAddress

  """The person’s name"""
  name: String

  """The primary unique identifier for the person"""
  rowId: Int
  site: BWrappedUrlInput
  userMac: MacAddress
}

"""Tracks the person's secret"""
type CPersonSecret {
  """The `Person` this `PersonSecret` belongs to."""
  cPersonByPersonId: CPerson
  personId: Int!

  """A secret held by the associated Person"""
  secret: String
}

"""
A condition to be used against `CPersonSecret` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CPersonSecretCondition {
  """Checks for equality with the object’s `personId` field."""
  personId: Int

  """Checks for equality with the object’s `secret` field."""
  secret: String
}

"""A connection to a list of `CPersonSecret` values."""
type CPersonSecretConnection {
  """
  A list of edges which contains the `CPersonSecret` and cursor to aid in pagination.
  """
  edges: [CPersonSecretEdge]!

  """A list of `CPersonSecret` objects."""
  nodes: [CPersonSecret]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CPersonSecret` you could get from the connection."""
  totalCount: Int!
}

"""A `CPersonSecret` edge in the connection."""
type CPersonSecretEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CPersonSecret` at the end of the edge."""
  node: CPersonSecret
}

"""An input for mutations affecting `CPersonSecret`"""
input CPersonSecretInput {
  personId: Int!

  """A secret held by the associated Person"""
  secret: String
}

"""Methods to use when ordering `CPersonSecret`."""
enum CPersonSecretOrderBy {
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SECRET_ASC
  SECRET_DESC
}

"""
Represents an update to a `CPersonSecret`. Fields that are set will be updated.
"""
input CPersonSecretPatch {
  personId: Int

  """A secret held by the associated Person"""
  secret: String
}

type CQueryOutputTwoRowsRecord {
  leftArm: CLeftArm
  post: Post
  txt: String
}

"""A connection to a list of `CSearchTestSummariesRecord` values."""
type CSearchTestSummariesConnection {
  """
  A list of edges which contains the `CSearchTestSummariesRecord` and cursor to aid in pagination.
  """
  edges: [CSearchTestSummariesEdge]!

  """A list of `CSearchTestSummariesRecord` objects."""
  nodes: [CSearchTestSummariesRecord]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CSearchTestSummariesRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CSearchTestSummariesRecord` edge in the connection."""
type CSearchTestSummariesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CSearchTestSummariesRecord` at the end of the edge."""
  node: CSearchTestSummariesRecord
}

type CSearchTestSummariesRecord {
  id: Int
  totalDuration: Interval
}

"""All input for the `cTableMutation` mutation."""
input CTableMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int
}

"""The output of our `cTableMutation` mutation."""
type CTableMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PostEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Post
}

"""All input for the `cTableSetMutation` mutation."""
input CTableSetMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `cTableSetMutation` mutation."""
type CTableSetMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CPerson]
}

"""All input for the `cTypesMutation` mutation."""
input CTypesMutationInput {
  a: BigInt!
  b: Boolean!
  c: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  d: [Int]!
  e: JSON!
  f: FloatRangeInput!
}

"""The output of our `cTypesMutation` mutation."""
type CTypesMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Boolean
}

"""An IPv4 or IPv6 CIDR address."""
scalar CidrAddress

type Comptype {
  isOptimised: Boolean
  schedule: Datetime
}

"""An input for mutations affecting `Comptype`"""
input ComptypeInput {
  isOptimised: Boolean
  schedule: Datetime
}

"""All input for the create `BList` mutation."""
input CreateBListInput {
  """The `BList` to be created by this mutation."""
  bList: BListInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `BList` mutation."""
type CreateBListPayload {
  """The `BList` that was created by this mutation."""
  bList: BList

  """An edge for our `BList`. May be used by Relay 1."""
  bListEdge(
    """The method to use when ordering `BList`."""
    orderBy: [BListOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BListEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `BType` mutation."""
input CreateBTypeInput {
  """The `BType` to be created by this mutation."""
  bType: BTypeInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `BType` mutation."""
type CreateBTypePayload {
  """The `BType` that was created by this mutation."""
  bType: BType

  """An edge for our `BType`. May be used by Relay 1."""
  bTypeEdge(
    """The method to use when ordering `BType`."""
    orderBy: [BTypeOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BTypeEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `BUpdatableView` mutation."""
input CreateBUpdatableViewInput {
  """The `BUpdatableView` to be created by this mutation."""
  bUpdatableView: BUpdatableViewInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `BUpdatableView` mutation."""
type CreateBUpdatableViewPayload {
  """The `BUpdatableView` that was created by this mutation."""
  bUpdatableView: BUpdatableView

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CCompoundKey` mutation."""
input CreateCCompoundKeyInput {
  """The `CCompoundKey` to be created by this mutation."""
  cCompoundKey: CCompoundKeyInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CCompoundKey` mutation."""
type CreateCCompoundKeyPayload {
  """The `CCompoundKey` that was created by this mutation."""
  cCompoundKey: CCompoundKey

  """An edge for our `CCompoundKey`. May be used by Relay 1."""
  cCompoundKeyEdge(
    """The method to use when ordering `CCompoundKey`."""
    orderBy: [CCompoundKeyOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CCompoundKeyEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CEdgeCase` mutation."""
input CreateCEdgeCaseInput {
  """The `CEdgeCase` to be created by this mutation."""
  cEdgeCase: CEdgeCaseInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CEdgeCase` mutation."""
type CreateCEdgeCasePayload {
  """The `CEdgeCase` that was created by this mutation."""
  cEdgeCase: CEdgeCase

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CIssue756` mutation."""
input CreateCIssue756Input {
  """The `CIssue756` to be created by this mutation."""
  cIssue756: CIssue756Input!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CIssue756` mutation."""
type CreateCIssue756Payload {
  """The `CIssue756` that was created by this mutation."""
  cIssue756: CIssue756

  """An edge for our `CIssue756`. May be used by Relay 1."""
  cIssue756Edge(
    """The method to use when ordering `CIssue756`."""
    orderBy: [CIssue756OrderBy!]! = [PRIMARY_KEY_ASC]
  ): CIssue756Edge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CLeftArm` mutation."""
input CreateCLeftArmInput {
  """The `CLeftArm` to be created by this mutation."""
  cLeftArm: CLeftArmInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CLeftArm` mutation."""
type CreateCLeftArmPayload {
  """The `CLeftArm` that was created by this mutation."""
  cLeftArm: CLeftArm

  """An edge for our `CLeftArm`. May be used by Relay 1."""
  cLeftArmEdge(
    """The method to use when ordering `CLeftArm`."""
    orderBy: [CLeftArmOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CLeftArmEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CMyTable` mutation."""
input CreateCMyTableInput {
  """The `CMyTable` to be created by this mutation."""
  cMyTable: CMyTableInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CMyTable` mutation."""
type CreateCMyTablePayload {
  """The `CMyTable` that was created by this mutation."""
  cMyTable: CMyTable

  """An edge for our `CMyTable`. May be used by Relay 1."""
  cMyTableEdge(
    """The method to use when ordering `CMyTable`."""
    orderBy: [CMyTableOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CMyTableEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CNullTestRecord` mutation."""
input CreateCNullTestRecordInput {
  """The `CNullTestRecord` to be created by this mutation."""
  cNullTestRecord: CNullTestRecordInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CNullTestRecord` mutation."""
type CreateCNullTestRecordPayload {
  """The `CNullTestRecord` that was created by this mutation."""
  cNullTestRecord: CNullTestRecord

  """An edge for our `CNullTestRecord`. May be used by Relay 1."""
  cNullTestRecordEdge(
    """The method to use when ordering `CNullTestRecord`."""
    orderBy: [CNullTestRecordOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CNullTestRecordEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CPerson` mutation."""
input CreateCPersonInput {
  """The `CPerson` to be created by this mutation."""
  cPerson: CPersonInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CPerson` mutation."""
type CreateCPersonPayload {
  """The `CPerson` that was created by this mutation."""
  cPerson: CPerson

  """An edge for our `CPerson`. May be used by Relay 1."""
  cPersonEdge(
    """The method to use when ordering `CPerson`."""
    orderBy: [CPersonOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CPersonEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CPersonSecret` mutation."""
input CreateCPersonSecretInput {
  """The `CPersonSecret` to be created by this mutation."""
  cPersonSecret: CPersonSecretInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CPersonSecret` mutation."""
type CreateCPersonSecretPayload {
  """The `CPersonSecret` that was created by this mutation."""
  cPersonSecret: CPersonSecret @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """An edge for our `CPersonSecret`. May be used by Relay 1."""
  cPersonSecretEdge(
    """The method to use when ordering `CPersonSecret`."""
    orderBy: [CPersonSecretOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CPersonSecretEdge @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `DefaultValue` mutation."""
input CreateDefaultValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DefaultValue` to be created by this mutation."""
  defaultValue: DefaultValueInput!
}

"""The output of our create `DefaultValue` mutation."""
type CreateDefaultValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DefaultValue` that was created by this mutation."""
  defaultValue: DefaultValue

  """An edge for our `DefaultValue`. May be used by Relay 1."""
  defaultValueEdge(
    """The method to use when ordering `DefaultValue`."""
    orderBy: [DefaultValueOrderBy!]! = [PRIMARY_KEY_ASC]
  ): DefaultValueEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ForeignKey` mutation."""
input CreateForeignKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ForeignKey` to be created by this mutation."""
  foreignKey: ForeignKeyInput!
}

"""The output of our create `ForeignKey` mutation."""
type CreateForeignKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ForeignKey` that was created by this mutation."""
  foreignKey: ForeignKey

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Input` mutation."""
input CreateInputInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Input` to be created by this mutation."""
  input: InputInput!
}

"""The output of our create `Input` mutation."""
type CreateInputPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Input` that was created by this mutation."""
  input: Input

  """An edge for our `Input`. May be used by Relay 1."""
  inputEdge(
    """The method to use when ordering `Input`."""
    orderBy: [InputOrderBy!]! = [PRIMARY_KEY_ASC]
  ): InputEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `NoPrimaryKey` mutation."""
input CreateNoPrimaryKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NoPrimaryKey` to be created by this mutation."""
  noPrimaryKey: NoPrimaryKeyInput!
}

"""The output of our create `NoPrimaryKey` mutation."""
type CreateNoPrimaryKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NoPrimaryKey` that was created by this mutation."""
  noPrimaryKey: NoPrimaryKey

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Patch` mutation."""
input CreatePatchInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Patch` to be created by this mutation."""
  patch: PatchInput!
}

"""The output of our create `Patch` mutation."""
type CreatePatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Patch` that was created by this mutation."""
  patch: Patch

  """An edge for our `Patch`. May be used by Relay 1."""
  patchEdge(
    """The method to use when ordering `Patch`."""
    orderBy: [PatchOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PatchEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PostEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Reserved` mutation."""
input CreateReservedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Reserved` to be created by this mutation."""
  reserved: ReservedInput!
}

"""All input for the create `ReservedInputRecord` mutation."""
input CreateReservedInputRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReservedInputRecord` to be created by this mutation."""
  reservedInputRecord: ReservedInputRecordInput!
}

"""The output of our create `ReservedInputRecord` mutation."""
type CreateReservedInputRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReservedInputRecord` that was created by this mutation."""
  reservedInputRecord: ReservedInputRecord

  """An edge for our `ReservedInputRecord`. May be used by Relay 1."""
  reservedInputRecordEdge(
    """The method to use when ordering `ReservedInputRecord`."""
    orderBy: [ReservedInputRecordOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ReservedInputRecordEdge
}

"""All input for the create `ReservedPatchRecord` mutation."""
input CreateReservedPatchRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReservedPatchRecord` to be created by this mutation."""
  reservedPatchRecord: ReservedPatchRecordInput!
}

"""The output of our create `ReservedPatchRecord` mutation."""
type CreateReservedPatchRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReservedPatchRecord` that was created by this mutation."""
  reservedPatchRecord: ReservedPatchRecord

  """An edge for our `ReservedPatchRecord`. May be used by Relay 1."""
  reservedPatchRecordEdge(
    """The method to use when ordering `ReservedPatchRecord`."""
    orderBy: [ReservedPatchRecordOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ReservedPatchRecordEdge
}

"""The output of our create `Reserved` mutation."""
type CreateReservedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reserved` that was created by this mutation."""
  reserved: Reserved

  """An edge for our `Reserved`. May be used by Relay 1."""
  reservedEdge(
    """The method to use when ordering `Reserved`."""
    orderBy: [ReservedOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ReservedEdge
}

"""All input for the create `SimilarTable1` mutation."""
input CreateSimilarTable1Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SimilarTable1` to be created by this mutation."""
  similarTable1: SimilarTable1Input!
}

"""The output of our create `SimilarTable1` mutation."""
type CreateSimilarTable1Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SimilarTable1` that was created by this mutation."""
  similarTable1: SimilarTable1

  """An edge for our `SimilarTable1`. May be used by Relay 1."""
  similarTable1Edge(
    """The method to use when ordering `SimilarTable1`."""
    orderBy: [SimilarTable1OrderBy!]! = [PRIMARY_KEY_ASC]
  ): SimilarTable1Edge
}

"""All input for the create `SimilarTable2` mutation."""
input CreateSimilarTable2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SimilarTable2` to be created by this mutation."""
  similarTable2: SimilarTable2Input!
}

"""The output of our create `SimilarTable2` mutation."""
type CreateSimilarTable2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SimilarTable2` that was created by this mutation."""
  similarTable2: SimilarTable2

  """An edge for our `SimilarTable2`. May be used by Relay 1."""
  similarTable2Edge(
    """The method to use when ordering `SimilarTable2`."""
    orderBy: [SimilarTable2OrderBy!]! = [PRIMARY_KEY_ASC]
  ): SimilarTable2Edge
}

"""All input for the create `Testview` mutation."""
input CreateTestviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Testview` to be created by this mutation."""
  testview: TestviewInput!
}

"""The output of our create `Testview` mutation."""
type CreateTestviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Testview` that was created by this mutation."""
  testview: Testview
}

"""All input for the create `UniqueForeignKey` mutation."""
input CreateUniqueForeignKeyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UniqueForeignKey` to be created by this mutation."""
  uniqueForeignKey: UniqueForeignKeyInput!
}

"""The output of our create `UniqueForeignKey` mutation."""
type CreateUniqueForeignKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UniqueForeignKey` that was created by this mutation."""
  uniqueForeignKey: UniqueForeignKey
}

"""All input for the create `ViewTable` mutation."""
input CreateViewTableInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ViewTable` to be created by this mutation."""
  viewTable: ViewTableInput!
}

"""The output of our create `ViewTable` mutation."""
type CreateViewTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ViewTable` that was created by this mutation."""
  viewTable: ViewTable

  """An edge for our `ViewTable`. May be used by Relay 1."""
  viewTableEdge(
    """The method to use when ordering `ViewTable`."""
    orderBy: [ViewTableOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ViewTableEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""A calendar date in YYYY-MM-DD format."""
scalar Date

"""A range of `Date`."""
type DateRange {
  """The ending bound of our range."""
  end: DateRangeBound

  """The starting bound of our range."""
  start: DateRangeBound
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
type DateRangeBound {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Date!
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
input DateRangeBoundInput {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Date!
}

"""A range of `Date`."""
input DateRangeInput {
  """The ending bound of our range."""
  end: DateRangeBoundInput

  """The starting bound of our range."""
  start: DateRangeBoundInput
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

type DefaultValue {
  nullValue: String
  rowId: Int!
}

"""
A condition to be used against `DefaultValue` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DefaultValueCondition {
  """Checks for equality with the object’s `nullValue` field."""
  nullValue: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `DefaultValue` values."""
type DefaultValueConnection {
  """
  A list of edges which contains the `DefaultValue` and cursor to aid in pagination.
  """
  edges: [DefaultValueEdge]!

  """A list of `DefaultValue` objects."""
  nodes: [DefaultValue]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DefaultValue` you could get from the connection."""
  totalCount: Int!
}

"""A `DefaultValue` edge in the connection."""
type DefaultValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DefaultValue` at the end of the edge."""
  node: DefaultValue
}

"""An input for mutations affecting `DefaultValue`"""
input DefaultValueInput {
  nullValue: String
  rowId: Int
}

"""Methods to use when ordering `DefaultValue`."""
enum DefaultValueOrderBy {
  NATURAL
  NULL_VALUE_ASC
  NULL_VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `DefaultValue`. Fields that are set will be updated.
"""
input DefaultValuePatch {
  nullValue: String
  rowId: Int
}

"""All input for the `deleteBListByRowId` mutation."""
input DeleteBListByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `BList` mutation."""
type DeleteBListPayload {
  """The `BList` that was deleted by this mutation."""
  bList: BList

  """An edge for our `BList`. May be used by Relay 1."""
  bListEdge(
    """The method to use when ordering `BList`."""
    orderBy: [BListOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BListEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteBTypeByRowId` mutation."""
input DeleteBTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `BType` mutation."""
type DeleteBTypePayload {
  """The `BType` that was deleted by this mutation."""
  bType: BType

  """An edge for our `BType`. May be used by Relay 1."""
  bTypeEdge(
    """The method to use when ordering `BType`."""
    orderBy: [BTypeOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BTypeEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteCCompoundKeyByPersonId1AndPersonId2` mutation.
"""
input DeleteCCompoundKeyByPersonId1AndPersonId2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId1: Int!
  personId2: Int!
}

"""The output of our delete `CCompoundKey` mutation."""
type DeleteCCompoundKeyPayload {
  """The `CCompoundKey` that was deleted by this mutation."""
  cCompoundKey: CCompoundKey

  """An edge for our `CCompoundKey`. May be used by Relay 1."""
  cCompoundKeyEdge(
    """The method to use when ordering `CCompoundKey`."""
    orderBy: [CCompoundKeyOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CCompoundKeyEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCIssue756ByRowId` mutation."""
input DeleteCIssue756ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `CIssue756` mutation."""
type DeleteCIssue756Payload {
  """The `CIssue756` that was deleted by this mutation."""
  cIssue756: CIssue756

  """An edge for our `CIssue756`. May be used by Relay 1."""
  cIssue756Edge(
    """The method to use when ordering `CIssue756`."""
    orderBy: [CIssue756OrderBy!]! = [PRIMARY_KEY_ASC]
  ): CIssue756Edge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCLeftArmByPersonId` mutation."""
input DeleteCLeftArmByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: Int!
}

"""All input for the `deleteCLeftArmByRowId` mutation."""
input DeleteCLeftArmByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `CLeftArm` mutation."""
type DeleteCLeftArmPayload {
  """The `CLeftArm` that was deleted by this mutation."""
  cLeftArm: CLeftArm

  """An edge for our `CLeftArm`. May be used by Relay 1."""
  cLeftArmEdge(
    """The method to use when ordering `CLeftArm`."""
    orderBy: [CLeftArmOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CLeftArmEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCMyTableByRowId` mutation."""
input DeleteCMyTableByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `CMyTable` mutation."""
type DeleteCMyTablePayload {
  """The `CMyTable` that was deleted by this mutation."""
  cMyTable: CMyTable

  """An edge for our `CMyTable`. May be used by Relay 1."""
  cMyTableEdge(
    """The method to use when ordering `CMyTable`."""
    orderBy: [CMyTableOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CMyTableEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCNullTestRecordByRowId` mutation."""
input DeleteCNullTestRecordByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `CNullTestRecord` mutation."""
type DeleteCNullTestRecordPayload {
  """The `CNullTestRecord` that was deleted by this mutation."""
  cNullTestRecord: CNullTestRecord

  """An edge for our `CNullTestRecord`. May be used by Relay 1."""
  cNullTestRecordEdge(
    """The method to use when ordering `CNullTestRecord`."""
    orderBy: [CNullTestRecordOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CNullTestRecordEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCPersonByEmail` mutation."""
input DeleteCPersonByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: BEmail!
}

"""All input for the `deleteCPersonByRowId` mutation."""
input DeleteCPersonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the person"""
  rowId: Int!
}

"""The output of our delete `CPerson` mutation."""
type DeleteCPersonPayload {
  """The `CPerson` that was deleted by this mutation."""
  cPerson: CPerson

  """An edge for our `CPerson`. May be used by Relay 1."""
  cPersonEdge(
    """The method to use when ordering `CPerson`."""
    orderBy: [CPersonOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CPersonEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCPersonSecretByPersonId` mutation."""
input DeleteCPersonSecretByPersonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: Int!
}

"""The output of our delete `CPersonSecret` mutation."""
type DeleteCPersonSecretPayload {
  """The `CPersonSecret` that was deleted by this mutation."""
  cPersonSecret: CPersonSecret

  """An edge for our `CPersonSecret`. May be used by Relay 1."""
  cPersonSecretEdge(
    """The method to use when ordering `CPersonSecret`."""
    orderBy: [CPersonSecretOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CPersonSecretEdge @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDefaultValueByRowId` mutation."""
input DeleteDefaultValueByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `DefaultValue` mutation."""
type DeleteDefaultValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DefaultValue` that was deleted by this mutation."""
  defaultValue: DefaultValue

  """An edge for our `DefaultValue`. May be used by Relay 1."""
  defaultValueEdge(
    """The method to use when ordering `DefaultValue`."""
    orderBy: [DefaultValueOrderBy!]! = [PRIMARY_KEY_ASC]
  ): DefaultValueEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteInputByRowId` mutation."""
input DeleteInputByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Input` mutation."""
type DeleteInputPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Input` that was deleted by this mutation."""
  input: Input

  """An edge for our `Input`. May be used by Relay 1."""
  inputEdge(
    """The method to use when ordering `Input`."""
    orderBy: [InputOrderBy!]! = [PRIMARY_KEY_ASC]
  ): InputEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteNoPrimaryKeyByRowId` mutation."""
input DeleteNoPrimaryKeyByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `NoPrimaryKey` mutation."""
type DeleteNoPrimaryKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NoPrimaryKey` that was deleted by this mutation."""
  noPrimaryKey: NoPrimaryKey

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePatchByRowId` mutation."""
input DeletePatchByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Patch` mutation."""
type DeletePatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Patch` that was deleted by this mutation."""
  patch: Patch

  """An edge for our `Patch`. May be used by Relay 1."""
  patchEdge(
    """The method to use when ordering `Patch`."""
    orderBy: [PatchOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PatchEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePostByRowId` mutation."""
input DeletePostByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was deleted by this mutation."""
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PostEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteReservedByRowId` mutation."""
input DeleteReservedByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""All input for the `deleteReservedInputRecordByRowId` mutation."""
input DeleteReservedInputRecordByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `ReservedInputRecord` mutation."""
type DeleteReservedInputRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReservedInputRecord` that was deleted by this mutation."""
  reservedInputRecord: ReservedInputRecord

  """An edge for our `ReservedInputRecord`. May be used by Relay 1."""
  reservedInputRecordEdge(
    """The method to use when ordering `ReservedInputRecord`."""
    orderBy: [ReservedInputRecordOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ReservedInputRecordEdge
}

"""All input for the `deleteReservedPatchRecordByRowId` mutation."""
input DeleteReservedPatchRecordByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `ReservedPatchRecord` mutation."""
type DeleteReservedPatchRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReservedPatchRecord` that was deleted by this mutation."""
  reservedPatchRecord: ReservedPatchRecord

  """An edge for our `ReservedPatchRecord`. May be used by Relay 1."""
  reservedPatchRecordEdge(
    """The method to use when ordering `ReservedPatchRecord`."""
    orderBy: [ReservedPatchRecordOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ReservedPatchRecordEdge
}

"""The output of our delete `Reserved` mutation."""
type DeleteReservedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reserved` that was deleted by this mutation."""
  reserved: Reserved

  """An edge for our `Reserved`. May be used by Relay 1."""
  reservedEdge(
    """The method to use when ordering `Reserved`."""
    orderBy: [ReservedOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ReservedEdge
}

"""All input for the `deleteSimilarTable1ByRowId` mutation."""
input DeleteSimilarTable1ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `SimilarTable1` mutation."""
type DeleteSimilarTable1Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SimilarTable1` that was deleted by this mutation."""
  similarTable1: SimilarTable1

  """An edge for our `SimilarTable1`. May be used by Relay 1."""
  similarTable1Edge(
    """The method to use when ordering `SimilarTable1`."""
    orderBy: [SimilarTable1OrderBy!]! = [PRIMARY_KEY_ASC]
  ): SimilarTable1Edge
}

"""All input for the `deleteSimilarTable2ByRowId` mutation."""
input DeleteSimilarTable2ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `SimilarTable2` mutation."""
type DeleteSimilarTable2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SimilarTable2` that was deleted by this mutation."""
  similarTable2: SimilarTable2

  """An edge for our `SimilarTable2`. May be used by Relay 1."""
  similarTable2Edge(
    """The method to use when ordering `SimilarTable2`."""
    orderBy: [SimilarTable2OrderBy!]! = [PRIMARY_KEY_ASC]
  ): SimilarTable2Edge
}

"""
All input for the `deleteUniqueForeignKeyByCompoundKey1AndCompoundKey2` mutation.
"""
input DeleteUniqueForeignKeyByCompoundKey1AndCompoundKey2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  compoundKey1: Int!
  compoundKey2: Int!
}

"""The output of our delete `UniqueForeignKey` mutation."""
type DeleteUniqueForeignKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UniqueForeignKey` that was deleted by this mutation."""
  uniqueForeignKey: UniqueForeignKey
}

"""All input for the `deleteViewTableByRowId` mutation."""
input DeleteViewTableByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `ViewTable` mutation."""
type DeleteViewTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ViewTable` that was deleted by this mutation."""
  viewTable: ViewTable

  """An edge for our `ViewTable`. May be used by Relay 1."""
  viewTableEdge(
    """The method to use when ordering `ViewTable`."""
    orderBy: [ViewTableOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ViewTableEdge
}

"""
The value at one end of a range. A range can either include this value, or not.
"""
input FloatRangeBoundInput {
  """Whether or not the value of this bound is included in the range."""
  inclusive: Boolean!

  """The value at one end of our range."""
  value: Float!
}

"""A range of `Float`."""
input FloatRangeInput {
  """The ending bound of our range."""
  end: FloatRangeBoundInput

  """The starting bound of our range."""
  start: FloatRangeBoundInput
}

type ForeignKey {
  """Reads a single `CCompoundKey` that is related to this `ForeignKey`."""
  cCompoundKeyByCompoundKey1AndCompoundKey2: CCompoundKey

  """Reads a single `CPerson` that is related to this `ForeignKey`."""
  cPersonByPersonId: CPerson
  compoundKey1: Int
  compoundKey2: Int
  personId: Int
}

"""
A condition to be used against `ForeignKey` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ForeignKeyCondition {
  """Checks for equality with the object’s `compoundKey1` field."""
  compoundKey1: Int

  """Checks for equality with the object’s `compoundKey2` field."""
  compoundKey2: Int

  """Checks for equality with the object’s `personId` field."""
  personId: Int
}

"""A connection to a list of `ForeignKey` values."""
type ForeignKeyConnection {
  """
  A list of edges which contains the `ForeignKey` and cursor to aid in pagination.
  """
  edges: [ForeignKeyEdge]!

  """A list of `ForeignKey` objects."""
  nodes: [ForeignKey]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ForeignKey` you could get from the connection."""
  totalCount: Int!
}

"""A `ForeignKey` edge in the connection."""
type ForeignKeyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ForeignKey` at the end of the edge."""
  node: ForeignKey
}

"""An input for mutations affecting `ForeignKey`"""
input ForeignKeyInput {
  compoundKey1: Int
  compoundKey2: Int
  personId: Int
}

"""Methods to use when ordering `ForeignKey`."""
enum ForeignKeyOrderBy {
  COMPOUND_KEY_1_ASC
  COMPOUND_KEY_1_DESC
  COMPOUND_KEY_2_ASC
  COMPOUND_KEY_2_DESC
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
}

"""Should output as Input"""
type Input {
  rowId: Int!
}

"""
A condition to be used against `Input` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input InputCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Input` values."""
type InputConnection {
  """
  A list of edges which contains the `Input` and cursor to aid in pagination.
  """
  edges: [InputEdge]!

  """A list of `Input` objects."""
  nodes: [Input]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Input` you could get from the connection."""
  totalCount: Int!
}

"""A `Input` edge in the connection."""
type InputEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Input` at the end of the edge."""
  node: Input
}

"""An input for mutations affecting `Input`"""
input InputInput {
  rowId: Int
}

"""Methods to use when ordering `Input`."""
enum InputOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `Input`. Fields that are set will be updated.
"""
input InputPatch {
  rowId: Int
}

"""An IPv4 or IPv6 host address, and optionally its subnet."""
scalar InternetAddress

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
type Interval {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
An interval of time that has passed where the smallest distinct unit is a second.
"""
input IntervalInput {
  """A quantity of days."""
  days: Int

  """A quantity of hours."""
  hours: Int

  """A quantity of minutes."""
  minutes: Int

  """A quantity of months."""
  months: Int

  """
  A quantity of seconds. This is the only non-integer field, as all the other
  fields will dump their overflow into a smaller unit of time. Intervals don’t
  have a smaller unit than seconds.
  """
  seconds: Float

  """A quantity of years."""
  years: Int
}

"""
Represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A set of key/value pairs, keys are strings, values may be a string or null. Exposed as a JSON object.
"""
scalar KeyValueHash

"""
Represents an `ltree` hierarchical label tree as outlined in https://www.postgresql.org/docs/current/ltree.html
"""
scalar LTree

"""A 6-byte MAC address."""
scalar MacAddress

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """lol, add some stuff 1 mutation"""
  add1Mutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Add1MutationInput!
  ): Add1MutationPayload

  """lol, add some stuff 2 mutation"""
  add2Mutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Add2MutationInput!
  ): Add2MutationPayload

  """lol, add some stuff 3 mutation"""
  add3Mutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Add3MutationInput!
  ): Add3MutationPayload

  """lol, add some stuff 4 mutation"""
  add4Mutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Add4MutationInput!
  ): Add4MutationPayload
  add4MutationError(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: Add4MutationErrorInput!
  ): Add4MutationErrorPayload
  bAuthenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BAuthenticateInput!
  ): BAuthenticatePayload
  bAuthenticateFail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BAuthenticateFailInput!
  ): BAuthenticateFailPayload
  bAuthenticateMany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BAuthenticateManyInput!
  ): BAuthenticateManyPayload
  bAuthenticatePayload(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BAuthenticatePayloadInput!
  ): BAuthenticatePayloadPayload
  bCompoundTypeArrayMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BCompoundTypeArrayMutationInput!
  ): BCompoundTypeArrayMutationPayload
  bCompoundTypeMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BCompoundTypeMutationInput!
  ): BCompoundTypeMutationPayload
  bCompoundTypeSetMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BCompoundTypeSetMutationInput!
  ): BCompoundTypeSetMutationPayload
  bGuidFn(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BGuidFnInput!
  ): BGuidFnPayload
  bListBdeMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BListBdeMutationInput!
  ): BListBdeMutationPayload
  bMult1(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BMult1Input!
  ): BMult1Payload
  bMult2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BMult2Input!
  ): BMult2Payload
  bMult3(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BMult3Input!
  ): BMult3Payload
  bMult4(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BMult4Input!
  ): BMult4Payload
  bTypeFunctionConnectionMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BTypeFunctionConnectionMutationInput!
  ): BTypeFunctionConnectionMutationPayload
  bTypeFunctionListMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BTypeFunctionListMutationInput!
  ): BTypeFunctionListMutationPayload
  bTypeFunctionMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: BTypeFunctionMutationInput!
  ): BTypeFunctionMutationPayload
  cIntSetMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CIntSetMutationInput!
  ): CIntSetMutationPayload
  cIssue756Mutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CIssue756MutationInput!
  ): CIssue756MutationPayload
  cIssue756SetMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CIssue756SetMutationInput!
  ): CIssue756SetMutationPayload
  cJsonIdentityMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CJsonIdentityMutationInput!
  ): CJsonIdentityMutationPayload
  cJsonbIdentityMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CJsonbIdentityMutationInput!
  ): CJsonbIdentityMutationPayload
  cJsonbIdentityMutationPlpgsql(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CJsonbIdentityMutationPlpgsqlInput!
  ): CJsonbIdentityMutationPlpgsqlPayload
  cJsonbIdentityMutationPlpgsqlWithDefault(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CJsonbIdentityMutationPlpgsqlWithDefaultInput!
  ): CJsonbIdentityMutationPlpgsqlWithDefaultPayload
  cLeftArmIdentity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CLeftArmIdentityInput!
  ): CLeftArmIdentityPayload
  cListOfCompoundTypesMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CListOfCompoundTypesMutationInput!
  ): CListOfCompoundTypesMutationPayload
  cMutationInInout(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationInInoutInput!
  ): CMutationInInoutPayload
  cMutationInOut(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationInOutInput!
  ): CMutationInOutPayload
  cMutationOut(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutInput!
  ): CMutationOutPayload
  cMutationOutComplex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutComplexInput!
  ): CMutationOutComplexPayload
  cMutationOutComplexSetof(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutComplexSetofInput!
  ): CMutationOutComplexSetofPayload
  cMutationOutOut(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutOutInput!
  ): CMutationOutOutPayload
  cMutationOutOutCompoundType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutOutCompoundTypeInput!
  ): CMutationOutOutCompoundTypePayload
  cMutationOutOutSetof(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutOutSetofInput!
  ): CMutationOutOutSetofPayload
  cMutationOutOutUnnamed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutOutUnnamedInput!
  ): CMutationOutOutUnnamedPayload
  cMutationOutSetof(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutSetofInput!
  ): CMutationOutSetofPayload
  cMutationOutTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutTableInput!
  ): CMutationOutTablePayload
  cMutationOutTableSetof(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutTableSetofInput!
  ): CMutationOutTableSetofPayload
  cMutationOutUnnamed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutUnnamedInput!
  ): CMutationOutUnnamedPayload
  cMutationOutUnnamedOutOutUnnamed(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationOutUnnamedOutOutUnnamedInput!
  ): CMutationOutUnnamedOutOutUnnamedPayload
  cMutationReturnsTableMultiCol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationReturnsTableMultiColInput!
  ): CMutationReturnsTableMultiColPayload
  cMutationReturnsTableOneCol(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CMutationReturnsTableOneColInput!
  ): CMutationReturnsTableOneColPayload
  cNoArgsMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CNoArgsMutationInput!
  ): CNoArgsMutationPayload
  cTableMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CTableMutationInput!
  ): CTableMutationPayload
  cTableSetMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CTableSetMutationInput!
  ): CTableSetMutationPayload
  cTypesMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CTypesMutationInput!
  ): CTypesMutationPayload

  """Creates a single `BList`."""
  createBList(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBListInput!
  ): CreateBListPayload

  """Creates a single `BType`."""
  createBType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBTypeInput!
  ): CreateBTypePayload

  """Creates a single `BUpdatableView`."""
  createBUpdatableView(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBUpdatableViewInput!
  ): CreateBUpdatableViewPayload

  """Creates a single `CCompoundKey`."""
  createCCompoundKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCCompoundKeyInput!
  ): CreateCCompoundKeyPayload

  """Creates a single `CEdgeCase`."""
  createCEdgeCase(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCEdgeCaseInput!
  ): CreateCEdgeCasePayload

  """Creates a single `CIssue756`."""
  createCIssue756(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCIssue756Input!
  ): CreateCIssue756Payload

  """Creates a single `CLeftArm`."""
  createCLeftArm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCLeftArmInput!
  ): CreateCLeftArmPayload

  """Creates a single `CMyTable`."""
  createCMyTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCMyTableInput!
  ): CreateCMyTablePayload

  """Creates a single `CNullTestRecord`."""
  createCNullTestRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCNullTestRecordInput!
  ): CreateCNullTestRecordPayload

  """Creates a single `CPerson`."""
  createCPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCPersonInput!
  ): CreateCPersonPayload

  """Creates a single `CPersonSecret`."""
  createCPersonSecret(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCPersonSecretInput!
  ): CreateCPersonSecretPayload @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """Creates a single `DefaultValue`."""
  createDefaultValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDefaultValueInput!
  ): CreateDefaultValuePayload

  """Creates a single `ForeignKey`."""
  createForeignKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateForeignKeyInput!
  ): CreateForeignKeyPayload

  """Creates a single `Input`."""
  createInput(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInputInput!
  ): CreateInputPayload

  """Creates a single `NoPrimaryKey`."""
  createNoPrimaryKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNoPrimaryKeyInput!
  ): CreateNoPrimaryKeyPayload

  """Creates a single `Patch`."""
  createPatch(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePatchInput!
  ): CreatePatchPayload

  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Creates a single `Reserved`."""
  createReserved(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReservedInput!
  ): CreateReservedPayload

  """Creates a single `ReservedInputRecord`."""
  createReservedInputRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReservedInputRecordInput!
  ): CreateReservedInputRecordPayload

  """Creates a single `ReservedPatchRecord`."""
  createReservedPatchRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReservedPatchRecordInput!
  ): CreateReservedPatchRecordPayload

  """Creates a single `SimilarTable1`."""
  createSimilarTable1(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSimilarTable1Input!
  ): CreateSimilarTable1Payload

  """Creates a single `SimilarTable2`."""
  createSimilarTable2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSimilarTable2Input!
  ): CreateSimilarTable2Payload

  """Creates a single `Testview`."""
  createTestview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTestviewInput!
  ): CreateTestviewPayload

  """Creates a single `UniqueForeignKey`."""
  createUniqueForeignKey(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUniqueForeignKeyInput!
  ): CreateUniqueForeignKeyPayload

  """Creates a single `ViewTable`."""
  createViewTable(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateViewTableInput!
  ): CreateViewTablePayload

  """Deletes a single `BList` using a unique key."""
  deleteBListByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBListByRowIdInput!
  ): DeleteBListPayload

  """Deletes a single `BType` using a unique key."""
  deleteBTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBTypeByRowIdInput!
  ): DeleteBTypePayload

  """Deletes a single `CCompoundKey` using a unique key."""
  deleteCCompoundKeyByPersonId1AndPersonId2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCCompoundKeyByPersonId1AndPersonId2Input!
  ): DeleteCCompoundKeyPayload

  """Deletes a single `CIssue756` using a unique key."""
  deleteCIssue756ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCIssue756ByRowIdInput!
  ): DeleteCIssue756Payload

  """Deletes a single `CLeftArm` using a unique key."""
  deleteCLeftArmByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCLeftArmByPersonIdInput!
  ): DeleteCLeftArmPayload

  """Deletes a single `CLeftArm` using a unique key."""
  deleteCLeftArmByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCLeftArmByRowIdInput!
  ): DeleteCLeftArmPayload

  """Deletes a single `CMyTable` using a unique key."""
  deleteCMyTableByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCMyTableByRowIdInput!
  ): DeleteCMyTablePayload

  """Deletes a single `CNullTestRecord` using a unique key."""
  deleteCNullTestRecordByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCNullTestRecordByRowIdInput!
  ): DeleteCNullTestRecordPayload

  """Deletes a single `CPerson` using a unique key."""
  deleteCPersonByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCPersonByEmailInput!
  ): DeleteCPersonPayload

  """Deletes a single `CPerson` using a unique key."""
  deleteCPersonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCPersonByRowIdInput!
  ): DeleteCPersonPayload

  """Deletes a single `CPersonSecret` using a unique key."""
  deleteCPersonSecretByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCPersonSecretByPersonIdInput!
  ): DeleteCPersonSecretPayload @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """Deletes a single `DefaultValue` using a unique key."""
  deleteDefaultValueByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDefaultValueByRowIdInput!
  ): DeleteDefaultValuePayload

  """Deletes a single `Input` using a unique key."""
  deleteInputByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInputByRowIdInput!
  ): DeleteInputPayload

  """Deletes a single `NoPrimaryKey` using a unique key."""
  deleteNoPrimaryKeyByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNoPrimaryKeyByRowIdInput!
  ): DeleteNoPrimaryKeyPayload

  """Deletes a single `Patch` using a unique key."""
  deletePatchByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePatchByRowIdInput!
  ): DeletePatchPayload

  """Deletes a single `Post` using a unique key."""
  deletePostByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByRowIdInput!
  ): DeletePostPayload

  """Deletes a single `Reserved` using a unique key."""
  deleteReservedByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReservedByRowIdInput!
  ): DeleteReservedPayload

  """Deletes a single `ReservedInputRecord` using a unique key."""
  deleteReservedInputRecordByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReservedInputRecordByRowIdInput!
  ): DeleteReservedInputRecordPayload

  """Deletes a single `ReservedPatchRecord` using a unique key."""
  deleteReservedPatchRecordByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReservedPatchRecordByRowIdInput!
  ): DeleteReservedPatchRecordPayload

  """Deletes a single `SimilarTable1` using a unique key."""
  deleteSimilarTable1ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSimilarTable1ByRowIdInput!
  ): DeleteSimilarTable1Payload

  """Deletes a single `SimilarTable2` using a unique key."""
  deleteSimilarTable2ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSimilarTable2ByRowIdInput!
  ): DeleteSimilarTable2Payload

  """Deletes a single `UniqueForeignKey` using a unique key."""
  deleteUniqueForeignKeyByCompoundKey1AndCompoundKey2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUniqueForeignKeyByCompoundKey1AndCompoundKey2Input!
  ): DeleteUniqueForeignKeyPayload

  """Deletes a single `ViewTable` using a unique key."""
  deleteViewTableByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteViewTableByRowIdInput!
  ): DeleteViewTablePayload
  mutationCompoundTypeArray(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationCompoundTypeArrayInput!
  ): MutationCompoundTypeArrayPayload
  mutationIntervalArray(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationIntervalArrayInput!
  ): MutationIntervalArrayPayload
  mutationIntervalSet(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationIntervalSetInput!
  ): MutationIntervalSetPayload
  mutationTextArray(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: MutationTextArrayInput!
  ): MutationTextArrayPayload
  postMany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PostManyInput!
  ): PostManyPayload
  postWithSuffix(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PostWithSuffixInput!
  ): PostWithSuffixPayload @deprecated(reason: "This is deprecated (comment on function a.post_with_suffix).")
  returnVoidMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ReturnVoidMutationInput!
  ): ReturnVoidMutationPayload

  """Updates a single `BList` using a unique key and a patch."""
  updateBListByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBListByRowIdInput!
  ): UpdateBListPayload

  """Updates a single `BType` using a unique key and a patch."""
  updateBTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBTypeByRowIdInput!
  ): UpdateBTypePayload

  """Updates a single `CCompoundKey` using a unique key and a patch."""
  updateCCompoundKeyByPersonId1AndPersonId2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCCompoundKeyByPersonId1AndPersonId2Input!
  ): UpdateCCompoundKeyPayload

  """Updates a single `CIssue756` using a unique key and a patch."""
  updateCIssue756ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCIssue756ByRowIdInput!
  ): UpdateCIssue756Payload

  """Updates a single `CLeftArm` using a unique key and a patch."""
  updateCLeftArmByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCLeftArmByPersonIdInput!
  ): UpdateCLeftArmPayload

  """Updates a single `CLeftArm` using a unique key and a patch."""
  updateCLeftArmByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCLeftArmByRowIdInput!
  ): UpdateCLeftArmPayload

  """Updates a single `CMyTable` using a unique key and a patch."""
  updateCMyTableByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCMyTableByRowIdInput!
  ): UpdateCMyTablePayload

  """Updates a single `CNullTestRecord` using a unique key and a patch."""
  updateCNullTestRecordByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCNullTestRecordByRowIdInput!
  ): UpdateCNullTestRecordPayload

  """Updates a single `CPerson` using a unique key and a patch."""
  updateCPersonByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCPersonByEmailInput!
  ): UpdateCPersonPayload

  """Updates a single `CPerson` using a unique key and a patch."""
  updateCPersonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCPersonByRowIdInput!
  ): UpdateCPersonPayload

  """Updates a single `CPersonSecret` using a unique key and a patch."""
  updateCPersonSecretByPersonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCPersonSecretByPersonIdInput!
  ): UpdateCPersonSecretPayload @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """Updates a single `DefaultValue` using a unique key and a patch."""
  updateDefaultValueByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDefaultValueByRowIdInput!
  ): UpdateDefaultValuePayload

  """Updates a single `Input` using a unique key and a patch."""
  updateInputByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInputByRowIdInput!
  ): UpdateInputPayload

  """Updates a single `NoPrimaryKey` using a unique key and a patch."""
  updateNoPrimaryKeyByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNoPrimaryKeyByRowIdInput!
  ): UpdateNoPrimaryKeyPayload

  """Updates a single `Patch` using a unique key and a patch."""
  updatePatchByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePatchByRowIdInput!
  ): UpdatePatchPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePostByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostByRowIdInput!
  ): UpdatePostPayload

  """Updates a single `Reserved` using a unique key and a patch."""
  updateReservedByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReservedByRowIdInput!
  ): UpdateReservedPayload

  """Updates a single `ReservedInputRecord` using a unique key and a patch."""
  updateReservedInputRecordByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReservedInputRecordByRowIdInput!
  ): UpdateReservedInputRecordPayload

  """Updates a single `ReservedPatchRecord` using a unique key and a patch."""
  updateReservedPatchRecordByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReservedPatchRecordByRowIdInput!
  ): UpdateReservedPatchRecordPayload

  """Updates a single `SimilarTable1` using a unique key and a patch."""
  updateSimilarTable1ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSimilarTable1ByRowIdInput!
  ): UpdateSimilarTable1Payload

  """Updates a single `SimilarTable2` using a unique key and a patch."""
  updateSimilarTable2ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSimilarTable2ByRowIdInput!
  ): UpdateSimilarTable2Payload

  """Updates a single `UniqueForeignKey` using a unique key and a patch."""
  updateUniqueForeignKeyByCompoundKey1AndCompoundKey2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUniqueForeignKeyByCompoundKey1AndCompoundKey2Input!
  ): UpdateUniqueForeignKeyPayload

  """Updates a single `ViewTable` using a unique key and a patch."""
  updateViewTableByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateViewTableByRowIdInput!
  ): UpdateViewTablePayload
}

"""All input for the `mutationCompoundTypeArray` mutation."""
input MutationCompoundTypeArrayInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  object: CCompoundTypeInput
}

"""The output of our `mutationCompoundTypeArray` mutation."""
type MutationCompoundTypeArrayPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [CCompoundType]
}

"""All input for the `mutationIntervalArray` mutation."""
input MutationIntervalArrayInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationIntervalArray` mutation."""
type MutationIntervalArrayPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [Interval]
}

"""All input for the `mutationIntervalSet` mutation."""
input MutationIntervalSetInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationIntervalSet` mutation."""
type MutationIntervalSetPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [Interval]
}

"""All input for the `mutationTextArray` mutation."""
input MutationTextArrayInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `mutationTextArray` mutation."""
type MutationTextArrayPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [String]
}

type NoPrimaryKey {
  rowId: Int!
  str: String!
}

"""
A condition to be used against `NoPrimaryKey` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NoPrimaryKeyCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `str` field."""
  str: String
}

"""A connection to a list of `NoPrimaryKey` values."""
type NoPrimaryKeyConnection {
  """
  A list of edges which contains the `NoPrimaryKey` and cursor to aid in pagination.
  """
  edges: [NoPrimaryKeyEdge]!

  """A list of `NoPrimaryKey` objects."""
  nodes: [NoPrimaryKey]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NoPrimaryKey` you could get from the connection."""
  totalCount: Int!
}

"""A `NoPrimaryKey` edge in the connection."""
type NoPrimaryKeyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NoPrimaryKey` at the end of the edge."""
  node: NoPrimaryKey
}

"""An input for mutations affecting `NoPrimaryKey`"""
input NoPrimaryKeyInput {
  rowId: Int!
  str: String!
}

"""Methods to use when ordering `NoPrimaryKey`."""
enum NoPrimaryKeyOrderBy {
  NATURAL
  ROW_ID_ASC
  ROW_ID_DESC
  STR_ASC
  STR_DESC
}

"""
Represents an update to a `NoPrimaryKey`. Fields that are set will be updated.
"""
input NoPrimaryKeyPatch {
  rowId: Int
  str: String
}

type NonUpdatableView {
  column: Int
}

"""
A condition to be used against `NonUpdatableView` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NonUpdatableViewCondition {
  """Checks for equality with the object’s `column` field."""
  column: Int
}

"""A connection to a list of `NonUpdatableView` values."""
type NonUpdatableViewConnection {
  """
  A list of edges which contains the `NonUpdatableView` and cursor to aid in pagination.
  """
  edges: [NonUpdatableViewEdge]!

  """A list of `NonUpdatableView` objects."""
  nodes: [NonUpdatableView]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NonUpdatableView` you could get from the connection.
  """
  totalCount: Int!
}

"""A `NonUpdatableView` edge in the connection."""
type NonUpdatableViewEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NonUpdatableView` at the end of the edge."""
  node: NonUpdatableView
}

"""Methods to use when ordering `NonUpdatableView`."""
enum NonUpdatableViewOrderBy {
  COLUMN_ASC
  COLUMN_DESC
  NATURAL
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""Should output as Patch"""
type Patch {
  rowId: Int!
}

"""
A condition to be used against `Patch` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PatchCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Patch` values."""
type PatchConnection {
  """
  A list of edges which contains the `Patch` and cursor to aid in pagination.
  """
  edges: [PatchEdge]!

  """A list of `Patch` objects."""
  nodes: [Patch]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Patch` you could get from the connection."""
  totalCount: Int!
}

"""A `Patch` edge in the connection."""
type PatchEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Patch` at the end of the edge."""
  node: Patch
}

"""An input for mutations affecting `Patch`"""
input PatchInput {
  rowId: Int
}

"""Methods to use when ordering `Patch`."""
enum PatchOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `Patch`. Fields that are set will be updated.
"""
input PatchPatch {
  rowId: Int
}

"""A cartesian point."""
type Point {
  x: Float!
  y: Float!
}

"""A cartesian point."""
input PointInput {
  x: Float!
  y: Float!
}

type Post {
  authorId: Int

  """Reads a single `BType` that is related to this `Post`."""
  bTypeByRowId: BType

  """Reads and enables pagination through a set of `BType`."""
  bTypesBySmallint(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BTypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BType`."""
    orderBy: [BTypeOrderBy!] = [PRIMARY_KEY_ASC]
  ): BTypeConnection!
  body: String

  """Reads a single `CPerson` that is related to this `Post`."""
  cPersonByAuthorId: CPerson
  comptypes: [Comptype]
  computedCompoundTypeArray(object: CCompoundTypeInput): [CCompoundType]
  computedIntervalArray: [Interval]

  """Reads and enables pagination through a set of `Interval`."""
  computedIntervalSet(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): PostComputedIntervalSetConnection!
  computedTextArray: [String]
  computedWithOptionalArg(i: Int): Int
  computedWithRequiredArg(i: Int!): Int
  enums: [AnEnum]
  headline: String!
  headlineTrimmed(length: Int, omission: String): String
  headlineTrimmedNoDefaults(length: Int, omission: String): String
  headlineTrimmedStrict(length: Int, omission: String): String
  rowId: Int!
}

"""A connection to a list of `Interval` values."""
type PostComputedIntervalSetConnection {
  """
  A list of edges which contains the `Interval` and cursor to aid in pagination.
  """
  edges: [PostComputedIntervalSetEdge]!

  """A list of `Interval` objects."""
  nodes: [Interval]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Interval` you could get from the connection."""
  totalCount: Int!
}

"""A `Interval` edge in the connection."""
type PostComputedIntervalSetEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Interval` at the end of the edge."""
  node: Interval
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `headline` field."""
  headline: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Post` values."""
type PostConnection {
  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostEdge]!

  """A list of `Post` objects."""
  nodes: [Post]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post
}

"""An input for mutations affecting `Post`"""
input PostInput {
  authorId: Int
  body: String
  comptypes: [ComptypeInput]
  enums: [AnEnum]
  headline: String!
  rowId: Int
}

"""All input for the `postMany` mutation."""
input PostManyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  posts: [PostInput]
}

"""The output of our `postMany` mutation."""
type PostManyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: [Post]
}

"""Methods to use when ordering `Post`."""
enum PostOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  BODY_ASC
  BODY_DESC
  HEADLINE_ASC
  HEADLINE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input PostPatch {
  authorId: Int
  body: String
  comptypes: [ComptypeInput]
  enums: [AnEnum]
  headline: String
  rowId: Int
}

"""All input for the `postWithSuffix` mutation."""
input PostWithSuffixInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  post: PostInput
  suffix: String
}

"""The output of our `postWithSuffix` mutation."""
type PostWithSuffixPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PostEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  result: Post
}

"""The root query type which gives access points into the data universe."""
type Query {
  """lol, add some stuff 1 query"""
  add1Query(arg0: Int!, arg1: Int!): Int

  """lol, add some stuff 2 query"""
  add2Query(a: Int!, b: Int): Int

  """lol, add some stuff 3 query"""
  add3Query(a: Int, arg1: Int): Int

  """lol, add some stuff 4 query"""
  add4Query(arg0: Int, b: Int): Int

  """Reads and enables pagination through a set of `BList`."""
  allBLists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BListCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BList`."""
    orderBy: [BListOrderBy!] = [PRIMARY_KEY_ASC]
  ): BListConnection

  """Reads and enables pagination through a set of `BType`."""
  allBTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BTypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BType`."""
    orderBy: [BTypeOrderBy!] = [PRIMARY_KEY_ASC]
  ): BTypeConnection

  """Reads and enables pagination through a set of `BUpdatableView`."""
  allBUpdatableViews(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BUpdatableViewCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BUpdatableView`."""
    orderBy: [BUpdatableViewOrderBy!] = [NATURAL]
  ): BUpdatableViewConnection

  """Reads and enables pagination through a set of `CCompoundKey`."""
  allCCompoundKeys(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CCompoundKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CCompoundKey`."""
    orderBy: [CCompoundKeyOrderBy!] = [PRIMARY_KEY_ASC]
  ): CCompoundKeyConnection

  """Reads and enables pagination through a set of `CEdgeCase`."""
  allCEdgeCases(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CEdgeCaseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CEdgeCase`."""
    orderBy: [CEdgeCaseOrderBy!] = [NATURAL]
  ): CEdgeCaseConnection

  """Reads and enables pagination through a set of `CIssue756`."""
  allCIssue756S(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CIssue756Condition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CIssue756`."""
    orderBy: [CIssue756OrderBy!] = [PRIMARY_KEY_ASC]
  ): CIssue756Connection

  """Reads and enables pagination through a set of `CLeftArm`."""
  allCLeftArms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CLeftArmCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CLeftArm`."""
    orderBy: [CLeftArmOrderBy!] = [PRIMARY_KEY_ASC]
  ): CLeftArmConnection

  """Reads and enables pagination through a set of `CMyTable`."""
  allCMyTables(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CMyTableCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CMyTable`."""
    orderBy: [CMyTableOrderBy!] = [PRIMARY_KEY_ASC]
  ): CMyTableConnection

  """Reads and enables pagination through a set of `CNullTestRecord`."""
  allCNullTestRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CNullTestRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CNullTestRecord`."""
    orderBy: [CNullTestRecordOrderBy!] = [PRIMARY_KEY_ASC]
  ): CNullTestRecordConnection

  """Reads and enables pagination through a set of `CPerson`."""
  allCPeople(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CPersonCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CPerson`."""
    orderBy: [CPersonOrderBy!] = [PRIMARY_KEY_ASC]
  ): CPersonConnection

  """Reads and enables pagination through a set of `CPersonSecret`."""
  allCPersonSecrets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CPersonSecretCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CPersonSecret`."""
    orderBy: [CPersonSecretOrderBy!] = [PRIMARY_KEY_ASC]
  ): CPersonSecretConnection @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """Reads and enables pagination through a set of `DefaultValue`."""
  allDefaultValues(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DefaultValueCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DefaultValue`."""
    orderBy: [DefaultValueOrderBy!] = [PRIMARY_KEY_ASC]
  ): DefaultValueConnection

  """Reads and enables pagination through a set of `ForeignKey`."""
  allForeignKeys(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ForeignKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ForeignKey`."""
    orderBy: [ForeignKeyOrderBy!] = [NATURAL]
  ): ForeignKeyConnection

  """Reads and enables pagination through a set of `Input`."""
  allInputs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InputCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Input`."""
    orderBy: [InputOrderBy!] = [PRIMARY_KEY_ASC]
  ): InputConnection

  """Reads and enables pagination through a set of `NoPrimaryKey`."""
  allNoPrimaryKeys(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NoPrimaryKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NoPrimaryKey`."""
    orderBy: [NoPrimaryKeyOrderBy!] = [NATURAL]
  ): NoPrimaryKeyConnection

  """Reads and enables pagination through a set of `NonUpdatableView`."""
  allNonUpdatableViews(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NonUpdatableViewCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `NonUpdatableView`."""
    orderBy: [NonUpdatableViewOrderBy!] = [NATURAL]
  ): NonUpdatableViewConnection

  """Reads and enables pagination through a set of `Patch`."""
  allPatches(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PatchCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Patch`."""
    orderBy: [PatchOrderBy!] = [PRIMARY_KEY_ASC]
  ): PatchConnection

  """Reads and enables pagination through a set of `Post`."""
  allPosts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Post`."""
    orderBy: [PostOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostConnection

  """Reads and enables pagination through a set of `ReservedInputRecord`."""
  allReservedInputRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReservedInputRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReservedInputRecord`."""
    orderBy: [ReservedInputRecordOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReservedInputRecordConnection

  """Reads and enables pagination through a set of `ReservedPatchRecord`."""
  allReservedPatchRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReservedPatchRecordCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReservedPatchRecord`."""
    orderBy: [ReservedPatchRecordOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReservedPatchRecordConnection

  """Reads and enables pagination through a set of `Reserved`."""
  allReserveds(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReservedCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Reserved`."""
    orderBy: [ReservedOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReservedConnection

  """Reads and enables pagination through a set of `SimilarTable1`."""
  allSimilarTable1S(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SimilarTable1Condition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SimilarTable1`."""
    orderBy: [SimilarTable1OrderBy!] = [PRIMARY_KEY_ASC]
  ): SimilarTable1Connection

  """Reads and enables pagination through a set of `SimilarTable2`."""
  allSimilarTable2S(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SimilarTable2Condition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SimilarTable2`."""
    orderBy: [SimilarTable2OrderBy!] = [PRIMARY_KEY_ASC]
  ): SimilarTable2Connection

  """Reads and enables pagination through a set of `Testview`."""
  allTestviews(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TestviewCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Testview`."""
    orderBy: [TestviewOrderBy!] = [NATURAL]
  ): TestviewConnection

  """Reads and enables pagination through a set of `UniqueForeignKey`."""
  allUniqueForeignKeys(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UniqueForeignKeyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `UniqueForeignKey`."""
    orderBy: [UniqueForeignKeyOrderBy!] = [NATURAL]
  ): UniqueForeignKeyConnection

  """Reads and enables pagination through a set of `ViewTable`."""
  allViewTables(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ViewTableCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ViewTable`."""
    orderBy: [ViewTableOrderBy!] = [PRIMARY_KEY_ASC]
  ): ViewTableConnection
  bCompoundTypeArrayQuery(object: CCompoundTypeInput): [CCompoundType]
  bCompoundTypeQuery(object: CCompoundTypeInput): CCompoundType

  """Get a single `BList`."""
  bListByRowId(rowId: Int!): BList

  """Get a single `BType`."""
  bTypeByRowId(rowId: Int!): BType
  bTypeFunction(id: Int): BType

  """Reads and enables pagination through a set of `BType`."""
  bTypeFunctionConnection(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): BTypeConnection
  bTypeFunctionList: [BType]

  """Reads and enables pagination through a set of `CPerson`."""
  cBadlyBehavedFunction(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CPersonConnection @deprecated(reason: "This is deprecated (comment on function c.badly_behaved_function).")

  """Get a single `CCompoundKey`."""
  cCompoundKeyByPersonId1AndPersonId2(personId1: Int!, personId2: Int!): CCompoundKey
  cCompoundTypeComputedField(compoundType: CCompoundTypeInput): Int

  """Reads and enables pagination through a set of `CCompoundType`."""
  cCompoundTypeSetQuery(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CCompoundTypeConnection
  cCurrentUserId: Int
  cFuncInInout(i: Int, ino: Int): Int
  cFuncInOut(i: Int): Int
  cFuncOut: Int
  cFuncOutComplex(a: Int, b: String): CFuncOutComplexRecord

  """
  Reads and enables pagination through a set of `CFuncOutComplexSetofRecord`.
  """
  cFuncOutComplexSetof(
    a: Int

    """Read all values in the set after (below) this cursor."""
    after: Cursor
    b: String

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CFuncOutComplexSetofConnection
  cFuncOutOut: CFuncOutOutRecord
  cFuncOutOutCompoundType(i1: Int): CFuncOutOutCompoundTypeRecord

  """
  Reads and enables pagination through a set of `CFuncOutOutSetofRecord`.
  """
  cFuncOutOutSetof(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CFuncOutOutSetofConnection
  cFuncOutOutUnnamed: CFuncOutOutUnnamedRecord

  """Reads and enables pagination through a set of `Int4`."""
  cFuncOutSetof(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CFuncOutSetofConnection
  cFuncOutTable: CPerson

  """Reads and enables pagination through a set of `CPerson`."""
  cFuncOutTableSetof(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CPersonConnection
  cFuncOutUnnamed: Int
  cFuncOutUnnamedOutOutUnnamed: CFuncOutUnnamedOutOutUnnamedRecord

  """
  Reads and enables pagination through a set of `CFuncReturnsTableMultiColRecord`.
  """
  cFuncReturnsTableMultiCol(
    a: Int

    """Read all values in the set after (below) this cursor."""
    after: Cursor
    b: Int

    """Only read the first `n` values of the set."""
    first: Int
    i: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CFuncReturnsTableMultiColConnection

  """Reads and enables pagination through a set of `Int4`."""
  cFuncReturnsTableOneCol(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int
    i: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CFuncReturnsTableOneColConnection

  """Reads and enables pagination through a set of `Int4`."""
  cIntSetQuery(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    x: Int
    y: Int
    z: Int
  ): CIntSetQueryConnection

  """Get a single `CIssue756`."""
  cIssue756ByRowId(rowId: Int!): CIssue756
  cJsonIdentity(json: JSON): JSON
  cJsonbIdentity(json: JSON): JSON

  """Get a single `CLeftArm`."""
  cLeftArmByPersonId(personId: Int!): CLeftArm

  """Get a single `CLeftArm`."""
  cLeftArmByRowId(rowId: Int!): CLeftArm

  """Get a single `CMyTable`."""
  cMyTableByRowId(rowId: Int!): CMyTable
  cNoArgsQuery: Int

  """Get a single `CNullTestRecord`."""
  cNullTestRecordByRowId(rowId: Int!): CNullTestRecord

  """Get a single `CPerson`."""
  cPersonByEmail(email: BEmail!): CPerson

  """Get a single `CPerson`."""
  cPersonByRowId(rowId: Int!): CPerson

  """Get a single `CPersonSecret`."""
  cPersonSecretByPersonId(personId: Int!): CPersonSecret @deprecated(reason: "This is deprecated (comment on table c.person_secret).")
  cQueryOutputTwoRows(leftArmId: Int, postId: Int, txt: String): CQueryOutputTwoRowsRecord
  cReturnTableWithoutGrants: CCompoundKey

  """
  Reads and enables pagination through a set of `CSearchTestSummariesRecord`.
  """
  cSearchTestSummaries(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CSearchTestSummariesConnection
  cTableQuery(id: Int): Post

  """Reads and enables pagination through a set of `CPerson`."""
  cTableSetQuery(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CPersonConnection

  """Reads and enables pagination through a set of `CPerson`."""
  cTableSetQueryPlpgsql(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CPersonConnection
  cTypesQuery(a: BigInt!, b: Boolean!, c: String!, d: [Int]!, e: JSON!, f: FloatRangeInput!): Boolean

  """Get a single `DefaultValue`."""
  defaultValueByRowId(rowId: Int!): DefaultValue

  """Get a single `Input`."""
  inputByRowId(rowId: Int!): Input

  """Get a single `NoPrimaryKey`."""
  noPrimaryKeyByRowId(rowId: Int!): NoPrimaryKey
  optionalMissingMiddle1(arg0: Int!, b: Int, c: Int): Int
  optionalMissingMiddle2(a: Int!, b: Int, c: Int): Int
  optionalMissingMiddle3(a: Int!, arg1: Int, c: Int): Int
  optionalMissingMiddle4(arg0: Int!, arg2: Int, b: Int): Int
  optionalMissingMiddle5(a: Int!, arg1: Int, arg2: Int): Int

  """Get a single `Patch`."""
  patchByRowId(rowId: Int!): Patch

  """Get a single `Post`."""
  postByRowId(rowId: Int!): Post

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  queryCompoundTypeArray(object: CCompoundTypeInput): [CCompoundType]
  queryIntervalArray: [Interval]

  """Reads and enables pagination through a set of `Interval`."""
  queryIntervalSet(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): QueryIntervalSetConnection
  queryTextArray: [String]

  """Get a single `Reserved`."""
  reservedByRowId(rowId: Int!): Reserved

  """Get a single `ReservedInputRecord`."""
  reservedInputRecordByRowId(rowId: Int!): ReservedInputRecord

  """Get a single `ReservedPatchRecord`."""
  reservedPatchRecordByRowId(rowId: Int!): ReservedPatchRecord

  """Get a single `SimilarTable1`."""
  similarTable1ByRowId(rowId: Int!): SimilarTable1

  """Get a single `SimilarTable2`."""
  similarTable2ByRowId(rowId: Int!): SimilarTable2

  """Reads and enables pagination through a set of `Int8`."""
  staticBigInteger(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): StaticBigIntegerConnection

  """Get a single `UniqueForeignKey`."""
  uniqueForeignKeyByCompoundKey1AndCompoundKey2(compoundKey1: Int!, compoundKey2: Int!): UniqueForeignKey

  """Get a single `ViewTable`."""
  viewTableByRowId(rowId: Int!): ViewTable
}

"""A connection to a list of `Interval` values."""
type QueryIntervalSetConnection {
  """
  A list of edges which contains the `Interval` and cursor to aid in pagination.
  """
  edges: [QueryIntervalSetEdge]!

  """A list of `Interval` objects."""
  nodes: [Interval]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Interval` you could get from the connection."""
  totalCount: Int!
}

"""A `Interval` edge in the connection."""
type QueryIntervalSetEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Interval` at the end of the edge."""
  node: Interval
}

"""A builtin object identifier type for a relation name"""
scalar RegClass

"""A builtin object identifier type for a text search configuration"""
scalar RegConfig

"""A builtin object identifier type for a text search dictionary"""
scalar RegDictionary

"""A builtin object identifier type for an operator"""
scalar RegOper

"""A builtin object identifier type for an operator with argument types"""
scalar RegOperator

"""A builtin object identifier type for a function name"""
scalar RegProc

"""A builtin object identifier type for a function with argument types"""
scalar RegProcedure

"""A builtin object identifier type for a data type name"""
scalar RegType

type Reserved {
  rowId: Int!
}

"""
A condition to be used against `Reserved` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ReservedCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `Reserved` values."""
type ReservedConnection {
  """
  A list of edges which contains the `Reserved` and cursor to aid in pagination.
  """
  edges: [ReservedEdge]!

  """A list of `Reserved` objects."""
  nodes: [Reserved]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Reserved` you could get from the connection."""
  totalCount: Int!
}

"""A `Reserved` edge in the connection."""
type ReservedEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Reserved` at the end of the edge."""
  node: Reserved
}

"""An input for mutations affecting `Reserved`"""
input ReservedInput {
  rowId: Int
}

"""
`reserved_input` table should get renamed to ReservedInputRecord to prevent clashes with ReservedInput from `reserved` table
"""
type ReservedInputRecord {
  rowId: Int!
}

"""
A condition to be used against `ReservedInputRecord` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ReservedInputRecordCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `ReservedInputRecord` values."""
type ReservedInputRecordConnection {
  """
  A list of edges which contains the `ReservedInputRecord` and cursor to aid in pagination.
  """
  edges: [ReservedInputRecordEdge]!

  """A list of `ReservedInputRecord` objects."""
  nodes: [ReservedInputRecord]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReservedInputRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ReservedInputRecord` edge in the connection."""
type ReservedInputRecordEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReservedInputRecord` at the end of the edge."""
  node: ReservedInputRecord
}

"""An input for mutations affecting `ReservedInputRecord`"""
input ReservedInputRecordInput {
  rowId: Int
}

"""Methods to use when ordering `ReservedInputRecord`."""
enum ReservedInputRecordOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `ReservedInputRecord`. Fields that are set will be updated.
"""
input ReservedInputRecordPatch {
  rowId: Int
}

"""Methods to use when ordering `Reserved`."""
enum ReservedOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `Reserved`. Fields that are set will be updated.
"""
input ReservedPatch {
  rowId: Int
}

"""
`reservedPatchs` table should get renamed to ReservedPatchRecord to prevent clashes with ReservedPatch from `reserved` table
"""
type ReservedPatchRecord {
  rowId: Int!
}

"""
A condition to be used against `ReservedPatchRecord` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ReservedPatchRecordCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `ReservedPatchRecord` values."""
type ReservedPatchRecordConnection {
  """
  A list of edges which contains the `ReservedPatchRecord` and cursor to aid in pagination.
  """
  edges: [ReservedPatchRecordEdge]!

  """A list of `ReservedPatchRecord` objects."""
  nodes: [ReservedPatchRecord]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReservedPatchRecord` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ReservedPatchRecord` edge in the connection."""
type ReservedPatchRecordEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReservedPatchRecord` at the end of the edge."""
  node: ReservedPatchRecord
}

"""An input for mutations affecting `ReservedPatchRecord`"""
input ReservedPatchRecordInput {
  rowId: Int
}

"""Methods to use when ordering `ReservedPatchRecord`."""
enum ReservedPatchRecordOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `ReservedPatchRecord`. Fields that are set will be updated.
"""
input ReservedPatchRecordPatch {
  rowId: Int
}

"""All input for the `returnVoidMutation` mutation."""
input ReturnVoidMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `returnVoidMutation` mutation."""
type ReturnVoidMutationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type SimilarTable1 {
  col1: Int
  col2: Int
  col3: Int!
  rowId: Int!
}

"""
A condition to be used against `SimilarTable1` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SimilarTable1Condition {
  """Checks for equality with the object’s `col1` field."""
  col1: Int

  """Checks for equality with the object’s `col2` field."""
  col2: Int

  """Checks for equality with the object’s `col3` field."""
  col3: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `SimilarTable1` values."""
type SimilarTable1Connection {
  """
  A list of edges which contains the `SimilarTable1` and cursor to aid in pagination.
  """
  edges: [SimilarTable1Edge]!

  """A list of `SimilarTable1` objects."""
  nodes: [SimilarTable1]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SimilarTable1` you could get from the connection."""
  totalCount: Int!
}

"""A `SimilarTable1` edge in the connection."""
type SimilarTable1Edge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SimilarTable1` at the end of the edge."""
  node: SimilarTable1
}

"""An input for mutations affecting `SimilarTable1`"""
input SimilarTable1Input {
  col1: Int
  col2: Int
  col3: Int!
  rowId: Int
}

"""Methods to use when ordering `SimilarTable1`."""
enum SimilarTable1OrderBy {
  COL1_ASC
  COL1_DESC
  COL2_ASC
  COL2_DESC
  COL3_ASC
  COL3_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `SimilarTable1`. Fields that are set will be updated.
"""
input SimilarTable1Patch {
  col1: Int
  col2: Int
  col3: Int
  rowId: Int
}

type SimilarTable2 {
  col3: Int!
  col4: Int
  col5: Int
  rowId: Int!
}

"""
A condition to be used against `SimilarTable2` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SimilarTable2Condition {
  """Checks for equality with the object’s `col3` field."""
  col3: Int

  """Checks for equality with the object’s `col4` field."""
  col4: Int

  """Checks for equality with the object’s `col5` field."""
  col5: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `SimilarTable2` values."""
type SimilarTable2Connection {
  """
  A list of edges which contains the `SimilarTable2` and cursor to aid in pagination.
  """
  edges: [SimilarTable2Edge]!

  """A list of `SimilarTable2` objects."""
  nodes: [SimilarTable2]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SimilarTable2` you could get from the connection."""
  totalCount: Int!
}

"""A `SimilarTable2` edge in the connection."""
type SimilarTable2Edge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SimilarTable2` at the end of the edge."""
  node: SimilarTable2
}

"""An input for mutations affecting `SimilarTable2`"""
input SimilarTable2Input {
  col3: Int!
  col4: Int
  col5: Int
  rowId: Int
}

"""Methods to use when ordering `SimilarTable2`."""
enum SimilarTable2OrderBy {
  COL3_ASC
  COL3_DESC
  COL4_ASC
  COL4_DESC
  COL5_ASC
  COL5_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `SimilarTable2`. Fields that are set will be updated.
"""
input SimilarTable2Patch {
  col3: Int
  col4: Int
  col5: Int
  rowId: Int
}

"""A connection to a list of `BigInt` values."""
type StaticBigIntegerConnection {
  """
  A list of edges which contains the `BigInt` and cursor to aid in pagination.
  """
  edges: [StaticBigIntegerEdge]!

  """A list of `BigInt` objects."""
  nodes: [BigInt]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BigInt` you could get from the connection."""
  totalCount: Int!
}

"""A `BigInt` edge in the connection."""
type StaticBigIntegerEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BigInt` at the end of the edge."""
  node: BigInt
}

type Testview {
  col1: Int
  col2: Int
  testviewid: Int
}

"""
A condition to be used against `Testview` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TestviewCondition {
  """Checks for equality with the object’s `col1` field."""
  col1: Int

  """Checks for equality with the object’s `col2` field."""
  col2: Int

  """Checks for equality with the object’s `testviewid` field."""
  testviewid: Int
}

"""A connection to a list of `Testview` values."""
type TestviewConnection {
  """
  A list of edges which contains the `Testview` and cursor to aid in pagination.
  """
  edges: [TestviewEdge]!

  """A list of `Testview` objects."""
  nodes: [Testview]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Testview` you could get from the connection."""
  totalCount: Int!
}

"""A `Testview` edge in the connection."""
type TestviewEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Testview` at the end of the edge."""
  node: Testview
}

"""An input for mutations affecting `Testview`"""
input TestviewInput {
  col1: Int
  col2: Int
  testviewid: Int
}

"""Methods to use when ordering `Testview`."""
enum TestviewOrderBy {
  COL1_ASC
  COL1_DESC
  COL2_ASC
  COL2_DESC
  NATURAL
  TESTVIEWID_ASC
  TESTVIEWID_DESC
}

"""
The exact time of day, does not include the date. May or may not have a timezone offset.
"""
scalar Time

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type UniqueForeignKey {
  """
  Reads a single `CCompoundKey` that is related to this `UniqueForeignKey`.
  """
  cCompoundKeyByCompoundKey1AndCompoundKey2: CCompoundKey
  compoundKey1: Int
  compoundKey2: Int
}

"""
A condition to be used against `UniqueForeignKey` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UniqueForeignKeyCondition {
  """Checks for equality with the object’s `compoundKey1` field."""
  compoundKey1: Int

  """Checks for equality with the object’s `compoundKey2` field."""
  compoundKey2: Int
}

"""A connection to a list of `UniqueForeignKey` values."""
type UniqueForeignKeyConnection {
  """
  A list of edges which contains the `UniqueForeignKey` and cursor to aid in pagination.
  """
  edges: [UniqueForeignKeyEdge]!

  """A list of `UniqueForeignKey` objects."""
  nodes: [UniqueForeignKey]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UniqueForeignKey` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UniqueForeignKey` edge in the connection."""
type UniqueForeignKeyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UniqueForeignKey` at the end of the edge."""
  node: UniqueForeignKey
}

"""An input for mutations affecting `UniqueForeignKey`"""
input UniqueForeignKeyInput {
  compoundKey1: Int
  compoundKey2: Int
}

"""Methods to use when ordering `UniqueForeignKey`."""
enum UniqueForeignKeyOrderBy {
  COMPOUND_KEY_1_ASC
  COMPOUND_KEY_1_DESC
  COMPOUND_KEY_2_ASC
  COMPOUND_KEY_2_DESC
  NATURAL
}

"""
Represents an update to a `UniqueForeignKey`. Fields that are set will be updated.
"""
input UniqueForeignKeyPatch {
  compoundKey1: Int
  compoundKey2: Int
}

"""All input for the `updateBListByRowId` mutation."""
input UpdateBListByRowIdInput {
  """
  An object where the defined keys will be set on the `BList` being updated.
  """
  bListPatch: BListPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our update `BList` mutation."""
type UpdateBListPayload {
  """The `BList` that was updated by this mutation."""
  bList: BList

  """An edge for our `BList`. May be used by Relay 1."""
  bListEdge(
    """The method to use when ordering `BList`."""
    orderBy: [BListOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BListEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateBTypeByRowId` mutation."""
input UpdateBTypeByRowIdInput {
  """
  An object where the defined keys will be set on the `BType` being updated.
  """
  bTypePatch: BTypePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our update `BType` mutation."""
type UpdateBTypePayload {
  """The `BType` that was updated by this mutation."""
  bType: BType

  """An edge for our `BType`. May be used by Relay 1."""
  bTypeEdge(
    """The method to use when ordering `BType`."""
    orderBy: [BTypeOrderBy!]! = [PRIMARY_KEY_ASC]
  ): BTypeEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateCCompoundKeyByPersonId1AndPersonId2` mutation.
"""
input UpdateCCompoundKeyByPersonId1AndPersonId2Input {
  """
  An object where the defined keys will be set on the `CCompoundKey` being updated.
  """
  cCompoundKeyPatch: CCompoundKeyPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId1: Int!
  personId2: Int!
}

"""The output of our update `CCompoundKey` mutation."""
type UpdateCCompoundKeyPayload {
  """The `CCompoundKey` that was updated by this mutation."""
  cCompoundKey: CCompoundKey

  """An edge for our `CCompoundKey`. May be used by Relay 1."""
  cCompoundKeyEdge(
    """The method to use when ordering `CCompoundKey`."""
    orderBy: [CCompoundKeyOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CCompoundKeyEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCIssue756ByRowId` mutation."""
input UpdateCIssue756ByRowIdInput {
  """
  An object where the defined keys will be set on the `CIssue756` being updated.
  """
  cIssue756Patch: CIssue756Patch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our update `CIssue756` mutation."""
type UpdateCIssue756Payload {
  """The `CIssue756` that was updated by this mutation."""
  cIssue756: CIssue756

  """An edge for our `CIssue756`. May be used by Relay 1."""
  cIssue756Edge(
    """The method to use when ordering `CIssue756`."""
    orderBy: [CIssue756OrderBy!]! = [PRIMARY_KEY_ASC]
  ): CIssue756Edge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCLeftArmByPersonId` mutation."""
input UpdateCLeftArmByPersonIdInput {
  """
  An object where the defined keys will be set on the `CLeftArm` being updated.
  """
  cLeftArmPatch: CLeftArmPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: Int!
}

"""All input for the `updateCLeftArmByRowId` mutation."""
input UpdateCLeftArmByRowIdInput {
  """
  An object where the defined keys will be set on the `CLeftArm` being updated.
  """
  cLeftArmPatch: CLeftArmPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our update `CLeftArm` mutation."""
type UpdateCLeftArmPayload {
  """The `CLeftArm` that was updated by this mutation."""
  cLeftArm: CLeftArm

  """An edge for our `CLeftArm`. May be used by Relay 1."""
  cLeftArmEdge(
    """The method to use when ordering `CLeftArm`."""
    orderBy: [CLeftArmOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CLeftArmEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCMyTableByRowId` mutation."""
input UpdateCMyTableByRowIdInput {
  """
  An object where the defined keys will be set on the `CMyTable` being updated.
  """
  cMyTablePatch: CMyTablePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our update `CMyTable` mutation."""
type UpdateCMyTablePayload {
  """The `CMyTable` that was updated by this mutation."""
  cMyTable: CMyTable

  """An edge for our `CMyTable`. May be used by Relay 1."""
  cMyTableEdge(
    """The method to use when ordering `CMyTable`."""
    orderBy: [CMyTableOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CMyTableEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCNullTestRecordByRowId` mutation."""
input UpdateCNullTestRecordByRowIdInput {
  """
  An object where the defined keys will be set on the `CNullTestRecord` being updated.
  """
  cNullTestRecordPatch: CNullTestRecordPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our update `CNullTestRecord` mutation."""
type UpdateCNullTestRecordPayload {
  """The `CNullTestRecord` that was updated by this mutation."""
  cNullTestRecord: CNullTestRecord

  """An edge for our `CNullTestRecord`. May be used by Relay 1."""
  cNullTestRecordEdge(
    """The method to use when ordering `CNullTestRecord`."""
    orderBy: [CNullTestRecordOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CNullTestRecordEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCPersonByEmail` mutation."""
input UpdateCPersonByEmailInput {
  """
  An object where the defined keys will be set on the `CPerson` being updated.
  """
  cPersonPatch: CPersonPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: BEmail!
}

"""All input for the `updateCPersonByRowId` mutation."""
input UpdateCPersonByRowIdInput {
  """
  An object where the defined keys will be set on the `CPerson` being updated.
  """
  cPersonPatch: CPersonPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The primary unique identifier for the person"""
  rowId: Int!
}

"""The output of our update `CPerson` mutation."""
type UpdateCPersonPayload {
  """The `CPerson` that was updated by this mutation."""
  cPerson: CPerson

  """An edge for our `CPerson`. May be used by Relay 1."""
  cPersonEdge(
    """The method to use when ordering `CPerson`."""
    orderBy: [CPersonOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CPersonEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCPersonSecretByPersonId` mutation."""
input UpdateCPersonSecretByPersonIdInput {
  """
  An object where the defined keys will be set on the `CPersonSecret` being updated.
  """
  cPersonSecretPatch: CPersonSecretPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  personId: Int!
}

"""The output of our update `CPersonSecret` mutation."""
type UpdateCPersonSecretPayload {
  """The `CPersonSecret` that was updated by this mutation."""
  cPersonSecret: CPersonSecret

  """An edge for our `CPersonSecret`. May be used by Relay 1."""
  cPersonSecretEdge(
    """The method to use when ordering `CPersonSecret`."""
    orderBy: [CPersonSecretOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CPersonSecretEdge @deprecated(reason: "This is deprecated (comment on table c.person_secret).")

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDefaultValueByRowId` mutation."""
input UpdateDefaultValueByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DefaultValue` being updated.
  """
  defaultValuePatch: DefaultValuePatch!
  rowId: Int!
}

"""The output of our update `DefaultValue` mutation."""
type UpdateDefaultValuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DefaultValue` that was updated by this mutation."""
  defaultValue: DefaultValue

  """An edge for our `DefaultValue`. May be used by Relay 1."""
  defaultValueEdge(
    """The method to use when ordering `DefaultValue`."""
    orderBy: [DefaultValueOrderBy!]! = [PRIMARY_KEY_ASC]
  ): DefaultValueEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateInputByRowId` mutation."""
input UpdateInputByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Input` being updated.
  """
  inputPatch: InputPatch!
  rowId: Int!
}

"""The output of our update `Input` mutation."""
type UpdateInputPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Input` that was updated by this mutation."""
  input: Input

  """An edge for our `Input`. May be used by Relay 1."""
  inputEdge(
    """The method to use when ordering `Input`."""
    orderBy: [InputOrderBy!]! = [PRIMARY_KEY_ASC]
  ): InputEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateNoPrimaryKeyByRowId` mutation."""
input UpdateNoPrimaryKeyByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `NoPrimaryKey` being updated.
  """
  noPrimaryKeyPatch: NoPrimaryKeyPatch!
  rowId: Int!
}

"""The output of our update `NoPrimaryKey` mutation."""
type UpdateNoPrimaryKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NoPrimaryKey` that was updated by this mutation."""
  noPrimaryKey: NoPrimaryKey

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePatchByRowId` mutation."""
input UpdatePatchByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Patch` being updated.
  """
  patchPatch: PatchPatch!
  rowId: Int!
}

"""The output of our update `Patch` mutation."""
type UpdatePatchPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Patch` that was updated by this mutation."""
  patch: Patch

  """An edge for our `Patch`. May be used by Relay 1."""
  patchEdge(
    """The method to use when ordering `Patch`."""
    orderBy: [PatchOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PatchEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePostByRowId` mutation."""
input UpdatePostByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  postPatch: PostPatch!
  rowId: Int!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostOrderBy!]! = [PRIMARY_KEY_ASC]
  ): PostEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateReservedByRowId` mutation."""
input UpdateReservedByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Reserved` being updated.
  """
  reservedPatch: ReservedPatch!
  rowId: Int!
}

"""All input for the `updateReservedInputRecordByRowId` mutation."""
input UpdateReservedInputRecordByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReservedInputRecord` being updated.
  """
  reservedInputRecordPatch: ReservedInputRecordPatch!
  rowId: Int!
}

"""The output of our update `ReservedInputRecord` mutation."""
type UpdateReservedInputRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReservedInputRecord` that was updated by this mutation."""
  reservedInputRecord: ReservedInputRecord

  """An edge for our `ReservedInputRecord`. May be used by Relay 1."""
  reservedInputRecordEdge(
    """The method to use when ordering `ReservedInputRecord`."""
    orderBy: [ReservedInputRecordOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ReservedInputRecordEdge
}

"""All input for the `updateReservedPatchRecordByRowId` mutation."""
input UpdateReservedPatchRecordByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReservedPatchRecord` being updated.
  """
  reservedPatchRecordPatch: ReservedPatchRecordPatch!
  rowId: Int!
}

"""The output of our update `ReservedPatchRecord` mutation."""
type UpdateReservedPatchRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReservedPatchRecord` that was updated by this mutation."""
  reservedPatchRecord: ReservedPatchRecord

  """An edge for our `ReservedPatchRecord`. May be used by Relay 1."""
  reservedPatchRecordEdge(
    """The method to use when ordering `ReservedPatchRecord`."""
    orderBy: [ReservedPatchRecordOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ReservedPatchRecordEdge
}

"""The output of our update `Reserved` mutation."""
type UpdateReservedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Reserved` that was updated by this mutation."""
  reserved: Reserved

  """An edge for our `Reserved`. May be used by Relay 1."""
  reservedEdge(
    """The method to use when ordering `Reserved`."""
    orderBy: [ReservedOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ReservedEdge
}

"""All input for the `updateSimilarTable1ByRowId` mutation."""
input UpdateSimilarTable1ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!

  """
  An object where the defined keys will be set on the `SimilarTable1` being updated.
  """
  similarTable1Patch: SimilarTable1Patch!
}

"""The output of our update `SimilarTable1` mutation."""
type UpdateSimilarTable1Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SimilarTable1` that was updated by this mutation."""
  similarTable1: SimilarTable1

  """An edge for our `SimilarTable1`. May be used by Relay 1."""
  similarTable1Edge(
    """The method to use when ordering `SimilarTable1`."""
    orderBy: [SimilarTable1OrderBy!]! = [PRIMARY_KEY_ASC]
  ): SimilarTable1Edge
}

"""All input for the `updateSimilarTable2ByRowId` mutation."""
input UpdateSimilarTable2ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!

  """
  An object where the defined keys will be set on the `SimilarTable2` being updated.
  """
  similarTable2Patch: SimilarTable2Patch!
}

"""The output of our update `SimilarTable2` mutation."""
type UpdateSimilarTable2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SimilarTable2` that was updated by this mutation."""
  similarTable2: SimilarTable2

  """An edge for our `SimilarTable2`. May be used by Relay 1."""
  similarTable2Edge(
    """The method to use when ordering `SimilarTable2`."""
    orderBy: [SimilarTable2OrderBy!]! = [PRIMARY_KEY_ASC]
  ): SimilarTable2Edge
}

"""
All input for the `updateUniqueForeignKeyByCompoundKey1AndCompoundKey2` mutation.
"""
input UpdateUniqueForeignKeyByCompoundKey1AndCompoundKey2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  compoundKey1: Int!
  compoundKey2: Int!

  """
  An object where the defined keys will be set on the `UniqueForeignKey` being updated.
  """
  uniqueForeignKeyPatch: UniqueForeignKeyPatch!
}

"""The output of our update `UniqueForeignKey` mutation."""
type UpdateUniqueForeignKeyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `UniqueForeignKey` that was updated by this mutation."""
  uniqueForeignKey: UniqueForeignKey
}

"""All input for the `updateViewTableByRowId` mutation."""
input UpdateViewTableByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!

  """
  An object where the defined keys will be set on the `ViewTable` being updated.
  """
  viewTablePatch: ViewTablePatch!
}

"""The output of our update `ViewTable` mutation."""
type UpdateViewTablePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ViewTable` that was updated by this mutation."""
  viewTable: ViewTable

  """An edge for our `ViewTable`. May be used by Relay 1."""
  viewTableEdge(
    """The method to use when ordering `ViewTable`."""
    orderBy: [ViewTableOrderBy!]! = [PRIMARY_KEY_ASC]
  ): ViewTableEdge
}

type ViewTable {
  col1: Int
  col2: Int
  rowId: Int!
}

"""
A condition to be used against `ViewTable` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ViewTableCondition {
  """Checks for equality with the object’s `col1` field."""
  col1: Int

  """Checks for equality with the object’s `col2` field."""
  col2: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""A connection to a list of `ViewTable` values."""
type ViewTableConnection {
  """
  A list of edges which contains the `ViewTable` and cursor to aid in pagination.
  """
  edges: [ViewTableEdge]!

  """A list of `ViewTable` objects."""
  nodes: [ViewTable]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ViewTable` you could get from the connection."""
  totalCount: Int!
}

"""A `ViewTable` edge in the connection."""
type ViewTableEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ViewTable` at the end of the edge."""
  node: ViewTable
}

"""An input for mutations affecting `ViewTable`"""
input ViewTableInput {
  col1: Int
  col2: Int
  rowId: Int
}

"""Methods to use when ordering `ViewTable`."""
enum ViewTableOrderBy {
  COL1_ASC
  COL1_DESC
  COL2_ASC
  COL2_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROW_ID_ASC
  ROW_ID_DESC
}

"""
Represents an update to a `ViewTable`. Fields that are set will be updated.
"""
input ViewTablePatch {
  col1: Int
  col2: Int
  rowId: Int
}
