## expect(errors).toBeFalsy();
#> schema: ["a", "b", "c"]
#> variableValues: { "config": { "a": "5", "b": "6", "actually_null": null, "null_string": "null", "_\"\\_$@£$)(@*£$": "_\"\\_$@£$)(@*£$" } }

mutation CreateMutation($config: KeyValueHash!) {
  b: createPerson(
    input: {
      person: {
        id: 9000
        name: "John Smith Jr."
        email: "johnny.boy.smith@email.com"
        about: "Son of Sara and John Smith."
        config: $config
        lastLoginFromIp: "172.16.1.2"
        lastLoginFromSubnet: "172.16.0.0/12"
        userMac: "00:00:00:00:00:00"
      }
    }
  ) {
    ...createPersonPayload
  }
}

fragment createPersonPayload on CreatePersonPayload {
  clientMutationId
  person {
    nodeId
    id
    name
    email
    about
    config
    lastLoginFromIp
    lastLoginFromSubnet
    userMac
    issue27UserExists: exists(email: "graphile-build.issue.27@example.com")
  }
  a: personEdge(orderBy: PRIMARY_KEY_ASC) {
    ...peopleEdge
  }
  c: personEdge(orderBy: ID_ASC) {
    ...peopleEdge
  }
  g: personEdge(orderBy: NATURAL) {
    ...peopleEdge
  }
  h: personEdge(orderBy: [EMAIL_DESC, ID_DESC]) {
    ...peopleEdge
  }
  query {
    nodeId
  }
}

fragment peopleEdge on PeopleEdge {
  cursor
  node {
    nodeId
    name
  }
}
