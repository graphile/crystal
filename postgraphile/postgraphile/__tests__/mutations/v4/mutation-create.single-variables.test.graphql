## expect(errors).toBeFalsy();
#> schema: ["a", "b", "c"]
# TODO: we perform a fetch for edge1 and a fetch for edge2; ideally we'd notice
# that the SQL is the same for both and we'd just perform the query once.
# However, to do so we'd have to know it's definitely not a mutation (no
# VOLATILE functions referenced). We can know this at plan time - see our
# neighbouring single-hardcoded test.

mutation CreateMutation(
  $order1: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
  $order2: [PeopleOrderBy!] = [ID_ASC]
) {
  createPerson(
    input: {
      person: {
        id: 9000
        name: "John Smith Jr."
        email: "johnny.boy.smith@email.com"
        about: "Son of Sara and John Smith."
        config: {}
        lastLoginFromIp: "172.16.1.2"
        lastLoginFromSubnet: "172.16.0.0/12"
        userMac: "00:00:00:00:00:00"
      }
    }
  ) {
    ...createPersonPayload
  }
}

fragment createPersonPayload on CreatePersonPayload {
  clientMutationId
  edge1: personEdge(orderBy: $order1) {
    ...peopleEdge
  }
  edge2: personEdge(orderBy: $order2) {
    ...peopleEdge
  }
  query {
    nodeId
  }
}

fragment peopleEdge on PeopleEdge {
  cursor
  node {
    nodeId
    name
  }
}
