name: Node CI

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      CI: true
      TERM: xterm
      FORCE_COLOR: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - run: yarn --immutable --ignore-engines
      - name: Build Code
        run: scripts/build
      - name: "Check Code Format"
        run: yarn prettier:check
      - name: "Lint Code"
        run: yarn lint
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            ./build
            ./build-turbo
            ./src/assets

  test:
    needs: build
    runs-on: ubuntu-latest

    env:
      CI: true
      PGVERSION: ${{ matrix.postgres-version }}
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5432/graphileengine_test
      TEST_PG_URL: postgres://postgres:postgres@localhost:5432/postgraphile_test
      LDS_TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5432/lds_test
      TERM: xterm
      FORCE_COLOR: 1

    strategy:
      fail-fast: false
      matrix:
        postgres-version:
          - 12
          - 13
          - 14
          - 15
        node-version:
          - 12.x
          - 14.x
          - 16.x

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - "0.0.0.0:5432:5432"
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5 --name postgres

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      - name: Configure PostgreSQL
        run: |
          cat .github/workflows/ci/docker-entrypoint-initdb.d/010-enable_wal.sh | docker exec -i postgres bash
          cat .github/workflows/ci/docker-entrypoint-initdb.d/020-setup.sh | docker exec -i postgres bash
          docker restart postgres
      - name: Install pg_dump
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null
          sudo apt-get update
          sudo apt-get -yqq install postgresql-client-${{ matrix.postgres-version }} postgresql-${{ matrix.postgres-version }}-wal2json
      - run: yarn --immutable --ignore-engines

      - name: Test Project
        run: scripts/test
