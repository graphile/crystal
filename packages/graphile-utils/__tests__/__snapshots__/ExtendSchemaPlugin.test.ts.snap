// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`accepts an array of typedefs 1`] = `
"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """A random number generated by a fair dice roll."""
  randomNumber: Int!

  """Gives a list of numbers that were randomly generated by fair dice roll"""
  randomNumbers: [Int!]!
}

`;

exports[`allows adding a field with arguments 1`] = `
"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Gives you back what you put in"""
  echo(input: [Int!]!): [Int!]!
}

`;

exports[`allows adding a field with arguments named using a custom inflector 1`] = `
"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Gives you back what you put in"""
  myCustomEchoFieldName(input: [Int!]!): [Int!]!
}

`;

exports[`allows adding a non-null list of non-null type 1`] = `
"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Gives a list of numbers that were randomly generated by fair dice roll"""
  randomNumbers: [Int!]!
}

`;

exports[`allows adding a non-null type 1`] = `
"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """A random number generated by a fair dice roll."""
  randomNumber: Int!
}

`;

exports[`allows adding a simple type 1`] = `
"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """A random number generated by a fair dice roll."""
  randomNumber: Int
}

`;

exports[`supports @scope directive with simple values 1`] = `
Object {
  "__origin": "graphile-build built-in (root query type)",
  "fieldDirectives": Object {
    "scope": Object {
      "floatTest": 3.141592,
      "intTest": 42,
      "isEchoField": true,
      "nullTest": null,
      "stringTest": "THIS_IS_A_STRING",
    },
  },
  "fieldName": "echo",
  "floatTest": 3.141592,
  "intTest": 42,
  "isEchoField": true,
  "isRootQuery": true,
  "nullTest": null,
  "stringTest": "THIS_IS_A_STRING",
  Symbol(hints): Object {
    "fieldDirectives": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "fieldName": "Within context for GraphQLObjectType 'Query'",
    "floatTest": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "intTest": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "isEchoField": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "nullTest": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "stringTest": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
  },
}
`;

exports[`supports @scope directive with simple values 2`] = `
"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Gives you back what you put in"""
  echo(input: [Int!]!): [Int!]!
}

`;

exports[`supports @scope directive with variable value 1`] = `
Object {
  "__origin": "graphile-build built-in (root query type)",
  "embedTest": Object {
    "sub": Array [
      Array [
        11,
        22,
      ],
      Array [
        33,
        44,
      ],
    ],
    Symbol(test-secret): "Fred",
  },
  "fieldDirectives": Object {
    "scope": Object {
      "embedTest": Object {
        "sub": Array [
          Array [
            11,
            22,
          ],
          Array [
            33,
            44,
          ],
        ],
        Symbol(test-secret): "Fred",
      },
      "floatTest": 3.141592,
      "intTest": 42,
      "isEchoField": true,
      "nullTest": null,
      "stringTest": "THIS_IS_A_STRING",
    },
  },
  "fieldName": "echo",
  "floatTest": 3.141592,
  "intTest": 42,
  "isEchoField": true,
  "isRootQuery": true,
  "nullTest": null,
  "stringTest": "THIS_IS_A_STRING",
  Symbol(hints): Object {
    "embedTest": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "fieldDirectives": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "fieldName": "Within context for GraphQLObjectType 'Query'",
    "floatTest": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "intTest": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "isEchoField": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "nullTest": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
    "stringTest": "Extending scope for field 'echo' within context for GraphQLObjectType 'Query'",
  },
}
`;

exports[`supports @scope directive with variable value 2`] = `
"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Gives you back what you put in"""
  echo(input: [Int!]!): [Int!]!
}

`;

exports[`supports defining a more complex mutation 1`] = `
input EchoInput {
  text: String!
  int: Int
  float: Float!
  intList: [Int!]
}

type EchoOutput {
  text: String!
  int: Int
  float: Float!
  intList: [Int!]
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Gives you back what you put in"""
  echo(input: EchoInput): EchoOutput
}

"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

`;

exports[`supports defining a more complex mutation 2`] = `
Object {
  "t1": Object {
    "float": 0.23,
    "int": null,
    "intList": null,
    "text": "Hi1",
  },
  "t2": Object {
    "float": 1.23,
    "int": 42,
    "intList": null,
    "text": "Hi2",
  },
  "t3": Object {
    "float": 2.23,
    "int": 88,
    "intList": Array [
      99,
      22,
      33,
    ],
    "text": "Hi3",
  },
}
`;

exports[`supports defining a simple mutation 1`] = `
"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  add(a: Int, b: Int): Int
}

"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

`;

exports[`supports defining a simple mutation 2`] = `
Object {
  "add": 143,
}
`;

exports[`supports defining a simple subscription 1`] = `
"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}

"""
The root subscription type: contains realtime events you can subscribe to with the \`subscription\` operation.
"""
type Subscription {
  clockTicks(
    """How frequently to fire a clock tick (milliseconds)"""
    frequency: Int = 100
  ): Float
}

`;

exports[`supports defining new types 1`] = `
enum EchoCount {
  ONCE
  TWICE
  FOREVER
}

input EchoInput {
  text: String!
  int: Int
  float: Float!
  count: EchoCount = FOREVER
  intList: [Int!]
}

type EchoOutput {
  text: String!
  int: Int
  float: Float!
  count: EchoCount!
  intList: [Int!]
}

"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Gives you back what you put in"""
  echo(input: EchoInput, enum: EchoCount = FOREVER): EchoOutput
}

`;

exports[`supports defining new types 2`] = `
Object {
  "t0": Object {
    "count": "FOREVER",
    "float": -0.42,
    "int": null,
    "intList": null,
    "text": "Hi0",
  },
  "t1": Object {
    "count": "ONCE",
    "float": 0.23,
    "int": null,
    "intList": null,
    "text": "Hi1",
  },
  "t2": Object {
    "count": "TWICE",
    "float": 1.23,
    "int": 42,
    "intList": null,
    "text": "Hi2",
  },
  "t3": Object {
    "count": "FOREVER",
    "float": 2.23,
    "int": 88,
    "intList": Array [
      99,
      22,
      33,
    ],
    "text": "Hi3",
  },
}
`;
